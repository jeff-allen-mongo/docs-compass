.. _validation:

==========
Validation
==========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. note::

   Schema validation is not available in
   :ref:`Compass Community Edition <compass-and-community-eds>`.

   Creating, editing and dropping schema validation rules is not
   permitted in
   :ref:`MongoDB Compass Readonly Edition <compass-readonly>`.
   In Readonly Edition, validation rules may only be read.

.. _validation-tab:

Validation Tab
--------------

The :guilabel:`Validation` tab displays the :manual:`schema
validation specification </core/document-validation>` (the validation
rules, the validation level, and the validation action) that exists for
a collection.

Schema validation ensures that all documents in a
collection follow a defined set of rules, such as conforming to a
specific shape or only allowing a specified range of values in
document fields.

From this tab, you can update the schema validation specification via
the :ref:`Rule Builder <rule-builder>` or the
:ref:`JSON editor <json-editor>`.

To view and modify the :guilabel:`Validation` for a collection, click
on the collection on the left hand pane, then click the
:guilabel:`Validation` tab.

.. figure:: /images/compass/validation-view.png
  :figwidth: 720px

Considerations
--------------

- If the current validation rules cannot be expressed through the
  :ref:`Rule Builder <rule-builder>`, Compass deactivates the Rule
  Builder, and you can only modify the validation specification
  through the :ref:`JSON editor <json-editor>` view.

- Each rule applies to a single field in the collection.

- No two rules in the Rule Builder can have the same field.

- The Rule Builder combines validation rules for the different
  fields as a logical ``AND``.

- To specify conditions not supported by the Rule Builder or to join
  validation rules with a logical ``OR``, use the
  :ref:`JSON Editor <json-editor>` instead of the
  :ref:`Rule Builder <rule-builder>`.

.. _validation-actions-levels:

Validation Actions and Levels
-----------------------------

You can specify :guilabel:`Validation Actions` and
:guilabel:`Validation Levels` in the :guilabel:`Validation` tab. These
settings dictate how rule violations are handled and the types of
documents affected by validation.

Validation Actions
~~~~~~~~~~~~~~~~~~

Validation actions determine how MongoDB handles documents that
violate validation rules. The following table describes the
different validation actions available:

.. list-table::
   :header-rows: 1
   :widths: 35 65

   * - ``Validation Action``
     - Description

   * - ``Warning``
     - Allows invalid documents but warns about violations.

   * - ``Error``
     - Does not allow invalid documents. With this setting,
       MongoDB errors and rejects documents that violate
       validation rules.

Validation Levels
~~~~~~~~~~~~~~~~~

Validation levels determine how strictly MongoDB applies validation
rules to existing documents during an update. The following table
describes the different validation levels available:

.. list-table::
   :header-rows: 1
   :widths: 35 65

   * - ``Validation Level``
     - Description

   * - ``Off``
     - Disables validation entirely.

   * - ``Moderate``
     - Applies validation rules to inserts and to updates to
       existing documents that already fulfill the validation
       criteria. With the :guilabel:`Moderate` level, updates to
       existing documents that do not fulfill the validation
       criteria are not checked for validity.

   * - ``Strict``
     - Applies validation rules to all inserts and updates.

.. _update-validation:
.. _create-validation-rules:

Create Validation Rules
-----------------------

|compass| supports two methods to create validation rules,
the :ref:`rule-builder` and the :ref:`json-editor`.

.. _rule-builder:

Rule Builder
~~~~~~~~~~~~

The Rule Builder facilitates the building and modification of schema
validation rules; however, the Rule Builder only supports a subset of
validation conditions.

.. include:: /includes/steps/create-validation-rule-via-builder.rst

.. _json-editor:

JSON Editor
~~~~~~~~~~~

You can also use the JSON editor to create validation rules. You can
use the JSON editor to create more advanced validation rules which
the :ref:`Rule Builder <rule-builder>` may not support.

The JSON editor supports validation with query filter expressions using
the :manual:`query operators
</reference/operator/query/#query-selectors>`, with the exception of
:query:`$near`, :query:`$nearSphere`, :query:`$text`, and
:query:`$where`.

.. include:: /includes/steps/create-validation-rule-via-json.rst

