{
    "url": "https://docs.mongodb.com/compass/current",
    "includeInGlobalSearch": true,
    "aliases": [],
    "documents": [
        {
            "slug": "index.html",
            "title": "MongoDB Compass \u2014 MongoDB Compass stable",
            "headings": [
                "MongoDB Compass",
                "Compass and Compass Community Editions",
                "Contact"
            ],
            "text": "\nMongoDB Compass\u00b6\n\nMongoDB Compass is available in the following versions\n\nGeneral Availability.\nBeta Version.\n\nTo download either version, go to the MongoDB Download Center.\n\nMongoDB Compass is designed to allow\nusers to easily analyze and understand the contents of\ntheir data collections within MongoDB and\nperform queries, without requiring knowledge of MongoDB\nquery syntax.\nMongoDB Compass provides users with a graphical view of their MongoDB\nschema by randomly sampling a subset of documents from the\ncollection. Sampling documents minimizes\nperformance impact on the database and can produce results quickly.\nSee the FAQ\nfor further information on sampling.\n\nCompass and Compass Community Editions\u00b6\nNow available in two editions: Compass Community and Compass\nBoth editions provide the ability to:\n\nView, add, and delete databases and collections\nView and interact with documents with full CRUD functionality\nBuild and run ad hoc queries\nView and optimize query performance with visual explain plans\nManage indexes: view stats, create, and delete\n\nCompass provides the following features not in the Community edition:\n\nKerberos Authentication\nLDAP Authentication\nx509 Authentication\nSchema Analysis\nReal Time Server Stats\nDocument Validation\n\n\n\nContact\u00b6\nQuestions, concerns or feedback on MongoDB Compass are appreciated.\nTo report a bug, submit a ticket to the MongoDB Commercial Support\nJIRA. For other feedback, contact\ncompass@mongodb.com.\n\n\nInstall Compass\nConnect to MongoDB\nMongoDB Instance\nDatabases\nServer Performance\n\n\nCollections\nQuery Bar\nDocuments\nSchema\nExplain Plans\nIndexes\nDocument Validation\n\n\nCreating Compass Plugins\nPlugin Tutorials\nDatabase User View Tutorial\nVideo Playback Plugin Tutorial\nSSH Tunnel Status Plugin Tutorial\n\n\nCompass Plugin Reference\n\n\nRelease Notes\nFAQ\n\n\n\n",
            "preview": "MongoDB Compass is designed to allow users to easily analyze and understand the contents of their data collections within MongoDB and perform queries, without requiring knowledge of MongoDB query syntax.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/compass/current/indexes/",
                "https://www.mongodb.com/downloads?jmp=docs",
                "https://docs.mongodb.com/compass/current/faq/",
                "https://docs.mongodb.com/compass/current/query-plan/",
                "https://docs.mongodb.com/compass/current/plugins/tutorial-ssh-tunnel-status/",
                "https://docs.mongodb.com/compass/current/plugins/tutorial-user-view/",
                "https://docs.mongodb.com/compass/current/schema/",
                "https://jira.mongodb.com",
                "https://docs.mongodb.com/compass/current/databases/",
                "http://docs.mongodb.org/manual/tutorial/query-documents",
                "https://docs.mongodb.com/compass/current/performance/",
                "https://docs.mongodb.com/compass/current/connect/",
                "https://docs.mongodb.com/compass/current/release-notes/",
                "https://docs.mongodb.com/compass/current/instance/",
                "https://docs.mongodb.com/compass/current/plugins/reference/",
                "mailto:compass%40mongodb.com",
                "https://docs.mongodb.com/compass/current/validation/",
                "https://docs.mongodb.com/compass/current/query-bar/",
                "https://docs.mongodb.com/compass/current/plugins/tutorial-video-player/",
                "https://docs.mongodb.com/compass/current/plugins/creating-compass-plugins/",
                "https://docs.mongodb.com/compass/current/collections/",
                "https://docs.mongodb.com/compass/current/install/",
                "https://docs.mongodb.com/compass/current/documents/",
                "https://docs.mongodb.com/compass/current/plugins/plugin-tutorials/"
            ]
        },
        {
            "slug": "collections/index.html",
            "title": "Collections \u2014 MongoDB Compass stable",
            "headings": [
                "Collections",
                "Collections View",
                "Create a Collection",
                "Click the Create Collection button.",
                "Enter the collection info.",
                "Click Create Collection to create the collection.",
                "Drop a Collection",
                "Click the trash can icon to delete a collection.",
                "Confirm the collection to delete.",
                "Click Drop Collection to drop the collection.",
                "View Collection/Index Information for a Collection"
            ],
            "text": "\nCollections\u00b6\n\nOn this page\n\nCollections View\nCreate a Collection\nDrop a Collection\nView Collection/Index Information for a Collection\n\n\n\nCollections View\u00b6\nFor a database, its Collections view lists the existing\ncollections in the database. To access the Collections view\nfor a database, either:\n\nClick on a database in the Databases tab:\n\n\n\n- or -\n\nClick on a database in the left-hand pane:\n\n\n\nFrom this view, in addition to viewing the current collections in the\ndatabase, you can create or drop collections.\n\n\n\n\nCreate a Collection\u00b6\nIn addition to the initial collection created during the database\ncreation, you can create new collections in an\nexisting database.\n1\nClick the Create Collection button.\u00b6\nFrom the Collections tab, click the\nCreate Collection button to bring up the\nCreate Collection dialog.\n\n2\nEnter the collection info.\u00b6\nIn the dialog, enter the name of the collection to create.\nIf you want to create a capped collection, select the\nCapped Collection checkbox and enter the maximum bytes.\n\n3\nClick Create Collection to create the collection.\u00b6\n\n\n\nDrop a Collection\u00b6\n1\nClick the trash can icon to delete a collection.\u00b6\nFrom the Collections tab, click on the\ntrash can for the collection to delete. A confirmation dialog\nappears.\n\n2\nConfirm the collection to delete.\u00b6\nIn the dialog, enter the name of the collection to delete.\n\n3\nClick Drop Collection to drop the collection.\u00b6\n\n\n\nView Collection/Index Information for a Collection\u00b6\nTo view information for a collection, either:\n\nClick on a collection in the Collections view:\n\n\n\n- or -\n\nClick on a collection in the left-hand pane:\n\n\n\nMongoDB Compass provides the following collection information:\n\nDocuments\nSchema Not Available in Compass Community Edition\nExplain Plans\nIndexes\nDocument Validation Not Available in Compass Community Edition\n\n\n\nQuery Bar\nDocuments\nSchema\nExplain Plans\nIndexes\nDocument Validation\n\n\n\n",
            "preview": "For a database, its Collections view lists the existing collections in the database. To access the Collections view for a database, either:",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/compass/current/indexes/",
                "https://docs.mongodb.com/compass/current/schema/",
                "https://docs.mongodb.com/compass/current/databases/",
                "https://docs.mongodb.com/compass/current/validation/",
                "https://docs.mongodb.com/compass/current/documents/",
                "https://docs.mongodb.com/compass/current/query-bar/",
                "https://docs.mongodb.com/compass/current/query-plan/"
            ]
        },
        {
            "slug": "connect/index.html",
            "title": "Connect to MongoDB \u2014 MongoDB Compass stable",
            "headings": [
                "Connect to MongoDB",
                "Connect",
                "Enter connection information.",
                "Connect.",
                "Required Access",
                "Disconnect"
            ],
            "text": "\nConnect to MongoDB\u00b6\n\nOn this page\n\nConnect\nRequired Access\nDisconnect\n\n\n\nConnect\u00b6\n1\nEnter connection information.\u00b6\nOnce Compass is running, an\ninitial connection dialog appears:\n\n\n\n\n\n\n\n\n\nHostname\nThe hostname of the machine where the mongod instance is\nrunning.\n\nTip\nStarting with version 1.8.0, MongoDB Compass can detect\nwhether you have a MongoDB\nURI connection string\nin your system clipboard and auto-populate the connection\ndialog from the URI. Open MongoDB Compass with a URI\nconnection string in your clipboard and click Yes\nwhen prompted to auto-populate the dialog.\n\n\n\nPort\nThe port on which mongod is running.\n\nAuthentication\nThe authentication to use if the mongod instance\nrequires authentication. Select:\n\nUsername / Password if the mongod instance\nuses either MongoDB-CR or SCRAM-SHA-1 as its\nauthentication mechanism.\n\nX.509 if the mongod instance uses\nX.509 as its authentication mechanism.\nNot Available in Compass Community Edition\n\nKerberos if the mongod instance uses\nKerberos as its authentication mechanism.\nNot Available in Compass Community Edition\n\nLDAP if the mongod instance uses LDAP as\nits authentication mechanism.\nNot Available in Compass Community Edition\n\n\nFor MongoDB access required, see Required Access.\n\n\nReplica Set Name\nThe name of the MongoDB replica set to which you want to connect.\n\nRead Preference\nSpecifies how Compass directs read operations. Options are\nPrimary, Primary Preferred, Secondary,\nSecondary Preferred, and Nearest. See Read Preference.\n\nSSL\nSelect whether Compass should connect to the target host via\nSSL or not. Select:\n\nUse System CA/Atlas Deployment to connect to\nMongoDB Atlas.\n\nServer Validation to have Compass validate the\nidentity of the mongod instance. If selected,\nyou must provide\n\n\n\n\n\n\nCertificate Authority File\nOne or more certificate files from trusted\nCertificate Authorities to validate the\ncertificate provided by the mongod\ninstance.\n\n\n\n\nServer and Client Validation if the\nmongod performs certificate validation from its\nclients and to have Compass validate the identity of the\nmongod instance. If selected, you must provide\n\n\n\n\n\n\nCertificate Authority File\nOne or more certificate files from trusted\nCertificate Authorities to validate the\ncertificate provided by the mongod\ninstance.\n\nClient Certificate\nA TLS/SSL certificate to present to\nmongod to verify the identity of the\nCompass client. Typical file extensions for the\ncertificate are .crt or .pem.\n\nClient Private Key\nA TLS/SSL key file to mongod to\nverify the identity of the Compass client.\nTypical file extensions for the private key are\n.key or .pem.\n\nClient Key Password\nIf the Client Private Key is protected with a\npassword/passphrase, you must provide the\npassword/passphrase.\n\n\n\n\nUnvalidated to use TLS/SSL without any identity validation.\n\n\n\nTip\nFor production use, your MongoDB deployment should use valid\ncertificates generated and signed by a single certificate\nauthority. You or your organization can generate and\nmaintain an independent certificate authority, or use\ncertificates generated by a third-party SSL vendor.\n\n\n\nSSH tunnel\nSelect whether Compass should connect to a MongoDB cluster\nvia an SSH tunnel, which automatically starts when you connect\nto MongoDB, and stops when you disconnect. If selected,\nchoose either a password or an identity file to provide\nauthentication.\n\n\n\nEnter information for the SSH tunnel.\n\n\n\n\n\n\nSSH Hostname\nEnter the bastion (jumpbox) hostname. This is the\nunique identifier (Fully Qualified Domain Name, or\nFQDN) for the machine to be accessed.\n\nSSH Tunnel Port\nProvide the port used for the SSH connection. This\ndefaults to 22, the standard port for SSH.\n\nSSH Username\nThe username of the profile to log into on the remote\nsystem. This will be the user for which you want to\nestablish the SSH connection.\n\nSSH Identity File\nSelect the file from which the identity (private key)\nfor SSH public key authentication is read.\nUnix or OS X: If using OpenSSH, identity files are\nfound in the ~/.ssh directory. By default,\nthe private key files have one of the following file\nnames:\n\nid_dsa\nid_ecdsa\nid_ed25519\nid_rsa\n\nOn Windows, the location of the identify files\ndepends on your choice of SSH client, such as PuTTY.\n\n\nSSH Passphrase\nIf your private key is encrypted, provide the\npassphrase used to decrypt your private keys (stored\nin the specified identity file). A passphrase\nprovides an extra layer of security for an SSH\nconnection.\n\nSSH Password\nThe password used to secure the SSH connection.\nThis is required if you are not using an identity file.\n\n\n\nTo use an SSH tunnel through a bastion host, the ssh\nconfiguration on the bastion host must allow TCP port\nforwarding; i.e., the AllowTcpForwarding directive in\nthe /etc/ssh/sshd_config file is set to yes. If\nAllowTcpForwarding is not set to yes, set to yes\nand restart the ssh daemon (sudo service sshd restart).\nInstead of creating the SSH tunnel through the Compass UI, you can also create\nthe tunnel manually from the command line:\nssh -L <local_port>:<mongodb_hostname>:<mongodb_port> \\\n   <user>@<bastion_hostname> -fN\n\n\n\nExample\nIf you have a mongod instance running on\n(internal) hostname-a.com on port 27017, and the\nbastion host is hostname-b.com with user name\nec2-user, you can build the tunnel via\nssh -L 27000:hostname-a.com:27017 ec2-user@hostname-b.com -fN\n\n\nUsing this SSH tunnel, you can now connect Compass (or\nthe mongo shell) to localhost:27000 to\nconnect to the mongod instance running on\nhostname-a.com.\n\n\n\nFavorite Name\nOptional. A name for the connection. When you use Compass in the\nfuture, previous connections appear in the left pane of this\nwindow under Favorites.\n\n\n\n\n2\nConnect.\u00b6\nWhen the connection information is complete, click the Connect\nbutton to launch the main Compass window.\nOnce connected to a MongoDB instance, the home \u2302 on the left hand\npane provides details regarding the MongoDB instance, such as the\nhostname and port, as well as the version of MongoDB. For more\ninformation, see MongoDB Instance.\n\n\n\nRequired Access\u00b6\nWith authentication/authorization enforced on the connected MongoDB\ninstance, the user requires appropriate privileges to access various\nfeatures. The following table lists the privileges required to access\nthe features as well as the built-in roles that can provide these\nprivileges:\n\nNote\nThe built-in roles may provide more access than required. You can\nalso create a User-Defined Roles to grant specific privileges.\n\n\n\n\n\n\n\n\n\nView\nFeature/Action\nPrivilege(s)\nMongoDB Built-In Role\n\n\n\nHome/MongoDB Instance\nServer Performance\n\ntop\ninprog\nserverStatus\n\n\nclusterMonitor\n\nDatabase\nCreate a Database\ncreateCollection\nreadWrite\n\nDatabase\nDrop a Database\ndropDatabase\ndbAdmin\n\nCollection\nCreate a Collection\ncreateCollection\nreadWrite\n\nCollection\nDrop a Collection\ndropCollection\nreadWrite\n\nSchema\nQuery/View\nfind\nread\n\nDocuments\nQuery/View\nfind\nread\n\nDocuments\nClone, insert, update, delete\n\nfind\ninsert\nupdate\nremove\n\n\nreadWrite\n\nIndexes\nView\nlistIndexes\nread\n\nIndexes\nCreate, drop\n\ncreateIndex\ndropIndex\n\n\nreadWrite\n\nExplain Plan\nQuery/View\nfind\nread\n\nValidation\nView rules\nlistCollections\nread\n\nValidation\nUpdate rules\ncollMod\ndbAdmin\n\n\n\n\n\nDisconnect\u00b6\nTo disconnect from a MongoDB instance in Compass:\n\nClick Connect in the menu bar, then\nSelect Disconnect from the dropdown menu\n\n\n\n\nDisconnecting from a MongoDB instance closes the Compass connection to\nthe active instance and returns the Compass view to the initial\nconnection dialog.\n\n",
            "preview": "Once Compass is running, an initial connection dialog appears:",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/manual/core/read-preference/",
                "https://docs.mongodb.com/compass/current/indexes/",
                "https://docs.mongodb.com/compass/current/collections/",
                "http://docs.mongodb.org/manual/reference/connection-string",
                "https://docs.mongodb.com/compass/current/install/",
                "https://docs.mongodb.com/compass/current/databases/",
                "https://docs.mongodb.com/manual/core/security-user-defined-roles/",
                "https://cloud.mongodb.com?jmp=docs",
                "https://docs.mongodb.com/compass/current/schema/",
                "https://docs.mongodb.com/compass/current/documents/",
                "https://docs.mongodb.com/manual/reference/privilege-actions/",
                "https://docs.mongodb.com/compass/current/query-plan/",
                "https://docs.mongodb.com/compass/current/performance/",
                "https://docs.mongodb.com/manual/reference/built-in-roles/",
                "https://docs.mongodb.com/compass/current/validation/",
                "https://docs.mongodb.com/compass/current/instance/"
            ]
        },
        {
            "slug": "databases/index.html",
            "title": "Databases \u2014 MongoDB Compass stable",
            "headings": [
                "Databases",
                "Databases Tab",
                "Create a Database",
                "Click the Create Database button.",
                "Enter database and first collection info.",
                "Click Create Database to create the database and its first collection.",
                "Drop a Database",
                "Click the trash can icon for the database.",
                "Confirm the database to delete.",
                "Click Drop Database to delete the database.",
                "View Collection/Index Information for a Database"
            ],
            "text": "\nDatabases\u00b6\n\nOn this page\n\nDatabases Tab\nCreate a Database\nDrop a Database\nView Collection/Index Information for a Database\n\n\n\nDatabases Tab\u00b6\nThe Databases tab lists the existing databases for your\nMongoDB deployment. To access the Databases tab, click the\nconnection home \u2302 on the left hand pane and click the\nDatabases tab.\n\n\nFrom this tab, in addition to viewing the current databases, you can\nalso create or delete databases.\n\n\n\n\nCreate a Database\u00b6\n1\nClick the Create Database button.\u00b6\nFrom the Databases tab, click the\nCreate Database button to bring up the\nCreate Database dialog.\n\n2\nEnter database and first collection info.\u00b6\nIn the dialog, enter the name of the database to create and its\nfirst collection. Both the database name and the collection name are\nrequired.\nIf you want to create a capped collection, select the\nCapped Collection checkbox and enter the maximum bytes.\n\n3\nClick Create Database to create the database and its first collection.\u00b6\n\n\n\nDrop a Database\u00b6\n1\nClick the trash can icon for the database.\u00b6\nFrom the Databases tab, to delete a\ndatabase, click on the trash can icon for that database. A\nconfirmation dialog appears.\n\n2\nConfirm the database to delete.\u00b6\nIn the dialog, enter the name of the database to delete.\n\n3\nClick Drop Database to delete the database.\u00b6\n\n\n\nView Collection/Index Information for a Database\u00b6\nTo view a list of collections for a database, either:\n\nClick on a database in the Databases tab:\n\n\n\n- or -\n\nClick on a database in the left-hand pane:\n\n\n\n\n",
            "preview": "The Databases tab lists the existing databases for your MongoDB deployment. To access the Databases tab, click the connection home \u2302 on the left hand pane and click the Databases tab.",
            "tags": "",
            "links": []
        },
        {
            "slug": "documents/index.html",
            "title": "Documents \u2014 MongoDB Compass stable",
            "headings": [
                "Documents",
                "Documents Tab",
                "Query Bar",
                "View Documents",
                "List View",
                "Table View",
                "Insert Documents",
                "Add New Fields",
                "Change Field Type",
                "Clone Documents",
                "Modify Documents",
                "Delete Fields",
                "Add New Fields",
                "Modify Existing Field",
                "Reverting a Change",
                "Cancel Changes",
                "Delete Documents"
            ],
            "text": "\nDocuments\u00b6\n\nOn this page\n\nDocuments Tab\nQuery Bar\nView Documents\nInsert Documents\nClone Documents\nModify Documents\nDelete Documents\n\n\n\nDocuments Tab\u00b6\nFrom the Documents tab, you can view, insert, clone, modify, and\ndelete documents.\n\n\nQuery Bar\u00b6\n\nNote\nFor large query result sets, the results are shown from a sampled set\nof documents.  Otherwise, Compass shows the entire result set.\nFor details on sampling, see the FAQ.\n\nFrom the query bar, you can specify the query, and\nif you click the Options, you can also specify query\noptions.\n\n\n\nYou can type MongoDB queries into the query bar. In the query\nexpression, you can use the various MongoDB query operators except for the $text query\noperator.\nAs you type, the Find button is disabled and the\nFilter label turns red until a valid query is entered.\nFilter syntax requires strict extended JSON types. For details on using the\nquery bar, see Filter.\n\n\nView Documents\u00b6\nUse the Documents tab to view the documents inside of a collection.\nTwo different views are available to access documents:\nList View and\nTable View.\n\nList View\u00b6\nWhen the Documents tab loads, Compass displays the List View, which\nshows all documents that match your query criteria\n(or all documents within the sample if no query criteria was\nspecified). The documents are shown as individual members in a list format,\nas shown in the following example:\n\n\n\nTo toggle the expansion of nested objects and array elements in a\ndocument, hover over the target document and click the arrow in the\ntop-left corner.\n\n\nTable View\u00b6\nCompass also provides the ability to view your documents in a table,\nrather than as individual items in a list.\nClick the Table button to the right of the\nList button to access the document Table View.\n\n\n\nYou can reorder the table columns by clicking and dragging the column\nheadings. Reordering the columns is a strictly cosmetic change and does\nnot change the underlying data itself.\nTo view nested object fields and array elements, hover your cursor over\na field with a value type of Object or Array and click the\nbutton with outward-pointing arrows which appears on the right side of\nthe field.\nThis opens a new tab in the Table View corresponding to the nested\nelement.\n\n\n\nThe following example displays the delays\nobject nested within the flightStats collection documents. The\nnew tab displays the two properties of the delay object:\narrivalRunwayDelayMinutes and departureRunwayDelayMinutes.\n\n\n\nTo return to the original table display, click on the first tab\nin the Table View which displays the name of your collection.\n\n\n\nInsert Documents\u00b6\nClick the Insert Document button to insert a new document:\n\n\n\nThe insert dialog appears:\n\n\n\nFor each field in the document, select field type and fill in the\nfield name and value.\n\n\n\n\nTip\nFor the field values, you can paste valid JSON that can be parsed by\nJavaScript\u2019s JSON.parse.\n\nIf the pasted JSON is an Array, the first character must be a left\nbracket [ and the last character must be a right bracket ]:\n[ \"first\", \"second\", 3 ]\n\n\n\nIf the pasted JSON is an Object (i.e. a document), the keys must\nbe quoted in double quotes and are permitted to be escaped. The\nfirst character must be left curly brace { and the last must\nbe right curly brace }:\n{\n  \"email\": \"test@example.com\",\n  \"phone\": \"555-555-1212\"\n}\n\n\n\n\n\n\nAdd New Fields\u00b6\nTo add a new field for the document, hover over the row number in the\ndialog (the row number is not part of the document but the dialog\ndisplay) and click on the plus sign add a new field after the field.\n\n\nYou can also add a new field at the end by hitting the Tab from the\nvalue of the last field.\n\nTip\nTo add a new field after an array or a document field, hover over\nthe row number in the dialog (the row number is not part of the\ndocument but the dialog display) and click on the plus sign add a\nnew field after the field.\n\n\n\nChange Field Type\u00b6\nYou can change the data type of a field by using the data type\nselectors on the right of the field.\n\n\n\nTo change the _id field to use a custom value, change\nthe data type from ObjectID to string and then overwrite the\n_id value:\n\n\n\n\n\n\nClone Documents\u00b6\nIt is also possible to insert new documents by cloning\nthe schema and values of an existing document in a collection.\nTo clone a document, hover over the desired document\nand click the Clone button.\n\n\n\nCloning a document works the same way in the\nTable View as it does in the\nList View:\n\n\n\nClicking the Clone button creates a new insert dialog with\nthe same schema and values. You can edit any of these fields and values\nbefore you insert the new document.\n\n\n\n\n\nModify Documents\u00b6\nTo edit a document, hover over the document and select the pencil icon:\n\n\n\nModifying a document works the same way in the\nTable View as it does in the\nList View:\n\n\n\nAfter you click the pencil icon, the document enters edit mode:\n\n\n\nYou can now make changes to the fields, values, or data types\nof values.\n\nTip\nFor the field values, you can paste valid JSON that can be parsed by\nJavaScript\u2019s JSON.parse.\n\nIf the pasted JSON is an Array, the first character must be a left\nbracket [ and the last character must be a right bracket ]:\n[ \"first\", \"second\", 3 ]\n\n\n\nIf the pasted JSON is an Object (i.e. a document), the keys must\nbe quoted in double quotes and are permitted to be escaped. The\nfirst character must be left curly brace { and the last must\nbe right curly brace }:\n{\n  \"email\": \"test@example.com\",\n  \"phone\": \"555-555-1212\"\n}\n\n\n\n\n\n\nDelete Fields\u00b6\nYou can delete fields by selecting the x icon to the\nleft of the field:\n\n\n\nOnce selected, the field is marked for removal and appears\nhighlighted in red:\n\n\n\n\n\nAdd New Fields\u00b6\nTo insert a new field, click or tab to the end of the document and\nfill in the field/value. New fields appear highlighted in green:\n\n\n\nTo add a new field for the document, hover over the row number in the\ndialog (the row number is not part of the document but the dialog\ndisplay) and click on the plus sign add a new field after the field.\nYou can also add a new field at the end by hitting the Tab from the\nvalue of the last field.\n\nTip\nTo add a new field after an array or a document field, hover over\nthe row number in the dialog (the row number is not part of the\ndocument but the dialog display) and click on the plus sign add a\nnew field after the field.\n\n\n\nModify Existing Field\u00b6\nYou can modify documents by clicking on existing field names or\nvalues and making changes. In this example, the flight status was\nchanged from L to M. Changed fields appear highlighted in\nyellow:\n\n\n\nWhen you are finished editing the document, click the Update button\nto commit your changes. Compass performs a findAndModify operation\nto update the document.\n\n\nReverting a Change\u00b6\nWhile modifying a document, you have the option to revert changes made to a\nfield prior to saving the modified document.\nTo revert changes to a document in the\nList View, hover over the edited field\nand click the revert icon which appears to the left of the\nfield\u2019s line number.\n\n\n\nTo revert changes to a document in the\nTable View, click the\nrevert icon which appears on the right side of the edited\ntable element.\n\n\n\n\n\nCancel Changes\u00b6\nTo exit the edit mode and cancel all pending changes to the document,\nclick the Cancel button.\n\n\n\nDelete Documents\u00b6\nFrom the Documents view, you can delete documents by\nhovering over the document and selecting the trash icon:\n\n\n\nDeleting a document works the same way in the\nTable View as it does in the\nList View:\n\n\n\nAfter clicking the delete button, the document is flagged for deletion\nand Compass asks for confirmation that you want to remove the document:\n\n\n\nAfter you confirm, Compass deletes the document\nfrom the collection.\n\n",
            "preview": "From the Documents tab, you can view, insert, clone, modify, and delete documents.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/operator/query/",
                "http://docs.mongodb.org/manual/reference/mongodb-extended-json/",
                "https://docs.mongodb.com/compass/current/faq/",
                "https://docs.mongodb.com/compass/current/query-bar/"
            ]
        },
        {
            "slug": "faq/index.html",
            "title": "FAQ \u2014 MongoDB Compass stable",
            "headings": [
                "FAQ",
                "What is the performance impact of running this tool?",
                "What is sampling and why is it used?",
                "How does sampling work?",
                "Won\u2019t sampling miss documents?",
                "What happens to long running queries?",
                "Slow Sampling",
                "Slow Schema Analysis",
                "What is the outcome of running queries in the Query Bar?"
            ],
            "text": "\nFAQ\u00b6\n\nOn this page\n\nWhat is the performance impact of running this tool?\nWhat is sampling and why is it used?\nHow does sampling work?\nWon\u2019t sampling miss documents?\nWhat happens to long running queries?\nWhat is the outcome of running queries in the Query Bar?\n\n\n\nWhat is the performance impact of running this tool?\u00b6\nTesting has shown that MongoDB Compass has minimal impact in prototype\ndeployments, though additional performance testing and monitoring is in\nprogress.\nFor best results, use MongoDB 3.2 or higher, which includes the\n$sample operator for efficient sampling on a collection. On\nolder versions of MongoDB, MongoDB Compass falls back on a less\nefficient sampling method.\nYou should only execute queries that are indexed appropriately in the\ndatabase to avoid scanning the entire collection.\n\n\nWhat is sampling and why is it used?\u00b6\nSampling in MongoDB Compass is the selection a subset of data\nfrom a particular collection and analyzing the documents within the\nsample set.\nSampling is a common technique in statistical analysis because analyzing\na subset of the data gives similar results to analyzing all of it. In\naddition, sampling allows results to be generated quickly rather than\nperforming a computationally-expensive collection scan.\n\n\nHow does sampling work?\u00b6\nMongoDB Compass employs two distinct sampling mechanisms.\nIn MongoDB 3.2, collections are sampled with the $sample\noperator via the /core/aggregation-pipeline. This provides\nefficient random sampling without replacement over the entire\ncollection, or over the subset of documents specified by a query.\nIn MongoDB 3.0 and 2.6, collections are sampled via a\nbackwards-compatible algorithm executed entirely within MongoDB Compass. It\ntakes place in three stages:\n\nMongoDB Compass opens a cursor on the desired collection, limited\nto at most 10,000 documents sorted in descending order of the _id\nfield.\nsampleSize documents are randomly selected from the stream. To\ndo this efficiently, MongoDB Compass employs reservoir sampling.\nMongoDB Compass performs a query to select the chosen documents directly\nvia _id.\n\nsampleSize is set to 1000 documents.\n\nNote\nThe choice of sampling method is done transparently in the\nbackground, with no changes required by the user.\n\n\n\nWon\u2019t sampling miss documents?\u00b6\nSampling is chosen for its efficiency: the amount of time required to\nperform a sample is minimal, on the order of a few seconds. Increasing\nthe sample confidence will demand more processing power and time.\nFurthermore, sophisticated outlier detection requires an inspection of\nevery document in a MongoDB deployment, which would be unfeasible for\nlarge data sets. The MongoDB team is in the process of conducting user\ntests on large data sets to find a reasonable balance.\n\n\nWhat happens to long running queries?\u00b6\nAs a precaution, Compass aborts long running queries to prevent\nexcessive querying on your database.\n\nSlow Sampling\u00b6\nAll queries that Compass sends to your MongoDB instance have a timeout\nflag set which automatically aborts a request if it takes longer than\nthe specified timeout. This timeout is currently set to 10 seconds. If\nsampling on the database takes longer, Compass will notify you about\nthe timeout and give you the options of (a) retrying with a longer\ntimeout (60 seconds) or (b) running a different query.\n\nNote\nSampling time may be affected by a number of factors, like load on\nthe server, number of documents and existence of a suitable index\nfor your query.\n\nIt is recommended that you only increase the sampling timeout if you\nare not connected to a production instance, as this may negatively\naffect the performance and response time of your database.\n\n\nSlow Schema Analysis\u00b6\nIf the database returns documents faster than the specified timeout (10\nor 60 seconds), but the schema analysis of the documents takes longer\nthan expected (due to complex, large documents), Compass gives you the\noption to abort the analysis step and show the partial results.\n\n\n\nWhat is the outcome of running queries in the Query Bar?\u00b6\nThe message below the Query Bar provides information about the number\nof documents that matched the query and the number of documents used\nfor the schema report.\nWhen you use the Query Bar to refine the results, either:\n\nThe query you specified matches more than the sampling limit\n(currently 1000 documents).\nIn this case, Compass samples 1000 documents randomly from the\nmatching documents, and builds a schema report based on that sample.\nYou will see a message that provides both the number of matched\ndocuments and the size of the sample set. Example:\n\n\n\n\n\n\nOr, the query you specified matches less than or equal to the\nsampling limit (currently 1000 documents).\nIn this case, Compass uses all matched documents to build a schema\nreport. You will see a message that provides the number of matched\ndocuments. Example:\n\n\n\n\n\n\n",
            "preview": "Testing has shown that MongoDB Compass has minimal impact in prototype deployments, though additional performance testing and monitoring is in progress.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/core/aggregation-pipeline",
                "https://docs.mongodb.com/manual/reference/glossary/",
                "http://en.wikipedia.org/wiki/Reservoir_sampling"
            ]
        },
        {
            "slug": "indexes/index.html",
            "title": "Indexes \u2014 MongoDB Compass stable",
            "headings": [
                "Indexes",
                "Indexes Tab",
                "Create an Index",
                "Click the Create Index button.",
                "Optional. Enter the index name.",
                "Add fields to index.",
                "Specify the index options, if any.",
                "Click Create to create the index.",
                "Drop an Index",
                "Click the trash can icon for the index to drop.",
                "Confirm the index to delete.",
                "Click Drop to drop the index."
            ],
            "text": "\nIndexes\u00b6\n\nOn this page\n\nIndexes Tab\nCreate an Index\nDrop an Index\n\n\n\nIndexes Tab\u00b6\nThe Indexes tab lists the existing indexes for a collection.\nTo access the Indexes tab for a collection, click on the\ncollection on the left hand pane and select the Indexes tab.\n\n\n\nFor each index, Compass displays the following information:\n\n\n\n\n\n\nName and Definition\nThe name of the index and keys.\n\nType\nRegular, text, geospatial or hashed index.\n\nSize\nHow large the index is.\n\nUsage\nNumber of times the index has been used since the time the index\nwas created or the last server restart.\n\nProperties\nAny special properties (such as uniqueness, partial) of the\nindex.\n\n\n\n\n\nCreate an Index\u00b6\nTo create an index on a collection via Compass, the collection must\ncontain documents.\n1\nClick the Create Index button.\u00b6\nFrom the Indexes tab, click the\nCreate Index button to bring up the\nCreate Index dialog.\n\n2\nOptional. Enter the index name.\u00b6\nIn the dialog, enter the name of the index to create, or leave blank\nto have MongoDB create a default name for the index.\n\n3\nAdd fields to index.\u00b6\nTo specify a key for the index, select the field and the index type\nTo index additional fields, click Add Another Field.\n\n4\nSpecify the index options, if any.\u00b6\n\n5\nClick Create to create the index.\u00b6\n\n\n\nDrop an Index\u00b6\n1\nClick the trash can icon for the index to drop.\u00b6\nFrom the Indexes tab, to delete an index,\nclick on the trash can icon for that index. A confirmation\ndialog appears.\n\n2\nConfirm the index to delete.\u00b6\nIn the dialog, enter the name of the index to delete.\n\n3\nClick Drop to drop the index.\u00b6\n\n\n",
            "preview": "The Indexes tab lists the existing indexes for a collection.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/compass/current/collections/"
            ]
        },
        {
            "slug": "install/index.html",
            "title": "Install Compass \u2014 MongoDB Compass stable",
            "headings": [
                "Install Compass",
                "Compatibility",
                "Download Compass",
                "Install on OS X",
                "Install on Windows",
                "Install on Ubuntu",
                "Install on Red Hat Enterprise Linux (RHEL)"
            ],
            "text": "\nInstall Compass\u00b6\n\nOn this page\n\nCompatibility\nDownload Compass\nInstall on OS X\nInstall on Windows\nInstall on Ubuntu\nInstall on Red Hat Enterprise Linux (RHEL)\n\n\n\nCompatibility\u00b6\nCompass works with MongoDB Server version 2.6 and higher, both\nEnterprise and Community editions. It runs on 64-bit versions\nof Mac OS X, Windows, Ubuntu 14.04+ and RHEL 7+.\nSoftware requirements to run Compass are listed below:\n\n\n\n\n\n\n\n\nPlatform\nMac OS X\nWindows\nLinux\n\n\n\nSupported?\n\u2713\n\u2713\n\u2713\n\nOS Version\n10.10 and above (64-bit)\n7 and above (64-bit)\n\nUbuntu 14.04+\nRHEL 7+ (64-bit)\n\n\n\n\n\n\n\nDownload Compass\u00b6\nTo download Compass, see the downloads page.\n\n\nInstall on OS X\u00b6\nFor OS X, the Compass package is available as a .dmg disk image. Once\nyou have downloaded Compass, click on the .dmg file to open the disk\nimage within the OS X Finder. Drag the Compass application to your\nApplications folder and unmount the disk image.\n\n\n\nLaunch Compass by clicking on it from within Applications. Upon launch\nyou will see the following dialog:\n\n\n\nClick Open to continue.\n\n\nInstall on Windows\u00b6\nThe Compass setup application is available as a .exe executable file.\nRun the program to begin the setup process, which installs Compass.\nCompass requires the Microsoft .NET Framework version 4.5 or later.\nIf it is not already installed on the system, the setup program will\nprompt you to install .NET.\n\nNote\nYou cannot modify the Compass installation path from within the\ninstaller.\n\nOnce installed, Compass launches automatically and prompts you to\nconfigure privacy settings and specify update preferences.\n\n\nInstall on Ubuntu\u00b6\nTo install on Ubuntu, download the .deb package from downloads\npage and double\nclick on the .deb package to open the package using Ubuntu\nSoftware. Click Install.\n\n\n\nOnce installed, launch Compass.\nYou can also download and install via the terminal:\n\nDownload the package:\nwget https://downloads.mongodb.com/compass/mongodb-compass_1.6.0_amd64.deb;\n\n\n\nInstall Compass.\nsudo dpkg -i mongodb-compass_1.6.0_amd64.deb;\n\n\n\nStart Compass.\nDEBUG=* mongodb-compass;\n\n\n\n\n\n\nInstall on Red Hat Enterprise Linux (RHEL)\u00b6\nTo download and install:\n\nDownload the package:\nwget https://downloads.mongodb.com/compass/mongodb-compass-1.6.0.x86_64.rpm;\n\n\n\nInstall Compass.\nsudo yum install mongodb-compass-1.6.0.x86_64.rpm;\n\n\n\nStart Compass.\nsudo DEBUG=* mongodb-compass;\n\n\n\n\n\n",
            "preview": "Compass works with MongoDB Server version 2.6 and higher, both Enterprise and Community editions. It runs on 64-bit versions of Mac OS X, Windows, Ubuntu 14.04+ and RHEL 7+.",
            "tags": "",
            "links": [
                "https://www.mongodb.com/downloads?jmp=docs"
            ]
        },
        {
            "slug": "instance/index.html",
            "title": "MongoDB Instance \u2014 MongoDB Compass stable",
            "headings": [
                "MongoDB Instance"
            ],
            "text": "\nMongoDB Instance\u00b6\nOnce connected to a MongoDB instance, the home \u2302 on the left hand\npane provides details regarding the MongoDB instance, such as:\n\nthe connection name if the connection is a favorite connection or \u201cMy\nCluster\u201d otherwise.\nthe deployment type (standalone, replica set, sharded cluster). If\nthe deployment is a replica set and the replica set name is specified\nin the connection window, the number of replica set members will also\nbe displayed.\nthe hostname and port, as well as the version of MongoDB.\n\n\n\nFrom the instance home, you can access:\n\nThe Databases tab to view and manage the\ndatabases in the deployment, and\nThe Server Performance tab to view real time\nserver stats. Not Available in Compass Community Edition\n\n\n\nDatabases\nServer Performance\n\n\n",
            "preview": "Once connected to a MongoDB instance, the home \u2302 on the left hand pane provides details regarding the MongoDB instance, such as:",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/compass/current/databases/",
                "https://docs.mongodb.com/compass/current/performance/"
            ]
        },
        {
            "slug": "performance/index.html",
            "title": "Server Performance \u2014 MongoDB Compass stable",
            "headings": [
                "Server Performance",
                "Performance Tab",
                "Server Stats",
                "Pause the Display"
            ],
            "text": "\nServer Performance\u00b6\n\nOn this page\n\nPerformance Tab\nServer Stats\n\n\nNot Available in Compass Community Edition\n\nPerformance Tab\u00b6\nTo access the real-time server performance view, click the connection\nhome \u2302 on the left hand pane to go to the Performance\ntab.\n\n\n\n\nServer Stats\u00b6\nThe Performance tab displays various stats:\n\n\n\n\n\n\n\n\nChart/Table\nDescription\n\n\n\nOperations\nDisplays the number of operations as reported by\nmongostat. For a description of the\nfields, see mongostat.\n\nRead & Write\nDisplays the number of active reads, queued reads, active\nwrites, queued writes as reported by mongostat. For a description of the fields, see\nmongostat.\n\nNetwork\nDisplays the number of connections as reported by\nmongostat. For a description of the\nfields, see mongostat.\n\nMemory\nDisplays the memory stats as reported by mongostat. For a description of the fields, see\nmongostat.\n\nHottest Collections\nDisplays the collections with the most activities as reported\nby mongotop.\nThe collections corresponds to a given moment in the charts;\ni.e. as you move over the charts, the corresponding collections\nare highlighted/displayed in the table.\n\n\nSlowest Operations\nDisplays the slowest operations as reported by\ndb.currentOp(). The\noperations correspond to a moment in the charts; i.e. as you\nmove over the charts, the corresponding slowest operations are\ndisplayed in the table. To view the details of a slow operation\nas reported by db.currentOp(), click on the operation.\n\n\n\n\nPause the Display\u00b6\nThe Pause button pauses the update of the displays only and\ndoes not pause the collection of the underlying data.\nTo restart the display updates, click Play.\n\n\n",
            "preview": "Not Available in Compass Community Edition",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/program/mongostat/",
                "http://docs.mongodb.org/manual/reference/method/db.currentOp",
                "https://docs.mongodb.com/manual/reference/program/mongostat/",
                "https://docs.mongodb.com/manual/reference/program/mongotop/"
            ]
        },
        {
            "slug": "plugins/creating-compass-plugins/index.html",
            "title": "Creating Compass Plugins \u2014 MongoDB Compass stable",
            "headings": [
                "Creating Compass Plugins",
                "Overview",
                "Getting Started",
                "Install Dependencies",
                "Create an Empty Plugin",
                "Restrictions",
                "Additional Information"
            ],
            "text": "\nCreating Compass Plugins\u00b6\n\nOn this page\n\nOverview\nGetting Started\nInstall Dependencies\nCreate an Empty Plugin\n\n\nRestrictions\nAdditional Information\n\n\n\nOverview\u00b6\nMongoDB Compass plugins allow you to extend Compass and tailor it to meet your\nspecific needs by writing a ReactJS module.\n\n\nGetting Started\u00b6\n\nNote\nPlugins require MongoDB Compass 1.11 or later.\n\n\nInstall Dependencies\u00b6\n\nInstall the latest version of MongoDB Compass for your operating system\nfrom the\nMongoDB Download Center.\n\nInstall the Node Version Manager (NVM):\n\nFor MacOS and Linux operating systems:\nFollow the installation instructions at\nhttps://github.com/creationix/nvm#install-script.\n\nFor Windows operating systems:\n\nDownload the nvm-setup.zip file from\nhttps://github.com/coreybutler/nvm-windows/releases.\nDecompress the downloaded .zip file and run nvm-setup.exe.\n\n\n\n\nInstall NodeJS via NVM:\nnvm install stable\n\n\n\nInstall the Khaos templating engine:\nnpm install -g khaos\n\n\n\nCreate the MongoDB Compass plugins directory. Compass looks for plugins in this\ndirectory:\n\nMongoDB Compass\nmkdir -p ~/.mongodb/compass/plugins\n\n\n\nMongoDB Compass Community Edition\nmkdir -p ~/.mongodb/compass-community/plugins\n\n\n\n\n\n\n\n\nCreate an Empty Plugin\u00b6\nRun the following commands to create an empty plugin. Replace <my-plugin> with the name of the plugin\nyou wish to create:\n\nMongoDB Compass\ncd ~/.mongodb/compass/plugins\nkhaos create mongodb-js/compass-plugin ./<my-plugin>\n\n\n\nMongoDB Compass Community Edition\ncd ~/.mongodb/compass-community/plugins\nkhaos create mongodb-js/compass-plugin ./<my-plugin>\n\n\n\n\nEnter the following information when prompted:\n\n\n\n\n\n\nField\nDescription\n\n\n\nName\nName of the plugin.\nWhen naming your plugin, Kebab Case is recommended; for example,\nquery-bar. Do not use spaces.\n\n\nDescription\nA brief description of what your plugin does.\n\nRole\nA plugin\u2019s role dictates where it exists within the MongoDB Compass\ninterface. The following roles are available:\n\nInstance.Tab\nHeader.Item\nDatabase.Tab\nCollection.Tab\nCollectionHUD.item\n\nFor details on these roles, see\nPlugin Roles.\n\n\n\n\nRun the following commands to navigate to your plugin directory and\ninstall the new plugin\u2019s dependencies:\ncd ~/.mongo/compass/plugins\ncd <plugin-name> && npm install\n\n\nRun the following command from your plugin\u2019s root directory to build\nthe plugin:\nnpm run compile\n\n\nLaunch Compass to view your plugin.\n\n\n\nRestrictions\u00b6\nThird-party plugins are prohibited from taking any of the following\nactions:\n\nAccessing network resources over any protocol outside of the database\nconnection. This includes network access via NodeJS or DOM APIs such\nas XMLHttpRequest.\nAccessing the filesystem outside of DOM APIs such as IndexedDB.\nSpawning child processes.\nAccessing MongoDB Compass internal preferences and core models.\n\n\n\nPlugin Tutorials\nDatabase User View Tutorial\nVideo Playback Plugin Tutorial\nSSH Tunnel Status Plugin Tutorial\n\n\nCompass Plugin Reference\n\n\n\n\nAdditional Information\u00b6\nFor detailed examples on creating custom MongoDB Compass plugins, see\nPlugin Tutorials.\n\nSee also\nCompass Plugin Reference\n\n\n",
            "preview": "MongoDB Compass plugins allow you to extend Compass and tailor it to meet your specific needs by writing a ReactJS module.",
            "tags": "",
            "links": [
                "https://github.com/coreybutler/nvm-windows/releases",
                "https://docs.mongodb.com/compass/current/plugins/tutorial-ssh-tunnel-status/",
                "https://docs.mongodb.com/compass/current/plugins/reference/",
                "https://reactjs.org/",
                "https://docs.mongodb.com/compass/current/plugins/tutorial-user-view/",
                "https://github.com/creationix/nvm",
                "https://docs.mongodb.com/compass/current/plugins/tutorial-video-player/",
                "http://wiki.c2.com/?KebabCase",
                "http://khaos.io/",
                "https://www.mongodb.com/download-center",
                "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest",
                "https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API",
                "https://docs.mongodb.com/compass/current/plugins/plugin-tutorials/",
                "https://nodejs.org/en/"
            ]
        },
        {
            "slug": "plugins/plugin-tutorials/index.html",
            "title": "Plugin Tutorials \u2014 MongoDB Compass stable",
            "headings": [
                "Plugin Tutorials"
            ],
            "text": "\nPlugin Tutorials\u00b6\nThe following tutorials for designing custom Compass plugins are\navailable:\n\nDatabase User View Tutorial\nCreate a plugin which displays database users and roles in a database tab.\nVideo Playback Plugin Tutorial\nCreate a plugin to view WebM\nvideos embedded within documents in a MongoDB collection.\nSSH Tunnel Status Plugin Tutorial\nCreate a plugin to display the hostname and status of the SSH\ntunnel through which the user is connected to MongoDB Compass.\n\n\n\nDatabase User View Tutorial\nVideo Playback Plugin Tutorial\nSSH Tunnel Status Plugin Tutorial\n\n\n",
            "preview": "The following tutorials for designing custom Compass plugins are available:",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/compass/current/plugins/tutorial-ssh-tunnel-status/",
                "https://docs.mongodb.com/compass/current/plugins/reference/",
                "https://docs.mongodb.com/compass/current/plugins/tutorial-user-view/",
                "http://docs.mongodb.org/manual/core/security-users/",
                "https://www.webmproject.org/",
                "https://docs.mongodb.com/compass/current/plugins/tutorial-video-player/",
                "http://docs.mongodb.org/manual/core/authorization/"
            ]
        },
        {
            "slug": "plugins/reference/index.html",
            "title": "Compass Plugin Reference \u2014 MongoDB Compass stable",
            "headings": [
                "Compass Plugin Reference",
                "Plugin Structure",
                "Plugin Roles",
                "Instance.Tab",
                "Header.Item",
                "Database.Tab",
                "Collection.Tab",
                "CollectionHUD.Item",
                "Writing Your Plugin",
                "Stores",
                "Defining Stores",
                "Registering Stores",
                "Actions",
                "Defining Actions",
                "Registering Actions",
                "Listening to Actions",
                "Components",
                "Defining Components",
                "Registering Components",
                "MongoDB Compass Application Registry",
                "Lifecycle Hooks",
                "Activation",
                "Connection",
                "Query Changes",
                "Namespace Changes",
                "Custom Assets",
                "Styling",
                "Example",
                "Using Classnames for Cleaner Class Name Construction",
                "Running Your Plugin"
            ],
            "text": "\nCompass Plugin Reference\u00b6\n\nOn this page\n\nPlugin Structure\nPlugin Roles\nWriting Your Plugin\nMongoDB Compass Application Registry\nLifecycle Hooks\nCustom Assets\nStyling\nRunning Your Plugin\n\n\n\nPlugin Structure\u00b6\nA newly initialized plugin template has the following folder structure:\n\nNote\nThe plugin source exists in the src directory.\n\nmy-plugin\n\u251c\u2500\u2500 README.md - Add documentation for your plugin here.\n|\n\u251c\u2500\u2500 electron\n\u2502   \u2514\u2500\u2500 renderer\n\u2502       \u2514\u2500\u2500 index.js - This is where the standalone app is setup to run in Electron.\n|\n\u251c\u2500\u2500 lib - Compiled sources for production get put here. Do not edit anything in this folder.\n|\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 index.js - Entry point for plugins to register themselves to the app registry.\n    \u251c\u2500\u2500 plugin.js - The root component for this plugin, connected to the store.\n    \u251c\u2500\u2500 plugin.spec.js - Tests for the root connected component.\n    \u251c\u2500\u2500 actions - Plugin actions go into this folder.\n    \u251c\u2500\u2500 assets - Static assets (e.g. Compass styles).\n    |\n    \u251c\u2500\u2500 components - Plugin React components go into this folder.\n    \u2502   \u251c\u2500\u2500 my-plugin - Each component has its own directory with the following structure:\n    \u2502   \u2502   \u251c\u2500\u2500 index.js - Export the component as a default export here.\n    \u2502   \u2502   \u251c\u2500\u2500 my-plugin.jsx - React implementation of the component.\n    \u2502   \u2502   \u251c\u2500\u2500 my-plugin.less - Styles for this component.\n    \u2502   \u2502   \u251c\u2500\u2500 my-plugin.stories.js - React Storybook stories for this component.\n    \u2502   \u2502   \u2514\u2500\u2500 my-plugin.spec.js - Tests for this component.\n    |   |\n    \u2502   \u2514\u2500\u2500 sub-component - Same structure for sub components.\n    \u2502       \u251c\u2500\u2500 index.js\n    \u2502       \u251c\u2500\u2500 sub-component.jsx\n    \u2502       \u251c\u2500\u2500 sub-component.less\n    \u2502       \u251c\u2500\u2500 sub-component.stories.js\n    \u2502       \u2514\u2500\u2500 sub-component.spec.js\n    |\n    \u2514\u2500\u2500 stores - Plugin stores go in this folder.\n        \u251c\u2500\u2500 index.js - Entry point for stores, declares named exports.\n        \u251c\u2500\u2500 store.js - Implementation of the store.\n        \u2514\u2500\u2500 store.spec.js - Unit tests for this store.\n\n\n\n\nPlugin Roles\u00b6\nThe role of your plugin dictates where your plugin exists within the\nCompass UI.\nThe 5 available roles for a plugin are:\n\nInstance.Tab\nHeader.Item\nDatabase.Tab\nCollection.Tab\nCollectionHUD.Item\n\n\nInstance.Tab\u00b6\nThis role adds a new tab at the instance level. Instance tabs are\naccessible by clicking the Home Icon in the top-left corner\nof the MongoDB Compass window. Currently, the two Instance Tabs in MongoDB Compass\nare Databases and Performance.\n\n\n\nThe Instance Tabs role supports the following options:\n\n\n\n\n\n\n\n\nField\nType\nRequired / Optional\nDescription\n\n\n\nComponent\nString\nRequired\nThe react component which draws the UI.\n\nName\nString\nRequired\nThe name of the tab\n\nOrder\nInteger\nOptional\nThe order this tab appears in the tab list, starting from 1.\n\n\n\n\n\nHeader.Item\u00b6\nHeader items display global information shown on every page of MongoDB Compass.\nThese items exist at the top of the application and are shown next to\nthe hostname.\n\n\n\n\nTip\nSince these items are given high visual hierarchy, they should be\nuniversally relevant.\nThe available space for header items is limited. If you are looking\nto display larger blocks of information, you might consider waiting\nuntil the user presses a provided icon or button to reveal the\nitem(s).\n\nThe Header Items role supports the following options:\n\n\n\n\n\n\n\n\nField\nType\nRequired / Optional\nDescription\n\n\n\nComponent\nString\nRequired\nThe react component which draws the UI.\n\nName\nString\nRequired\nThe name of the tab\n\nAlignment\nString\nOptional\nChoose right (default) or left to indicate how the\nheading will be aligned.\n\nOrder\nInteger\nOptional\nThe order this item appears in the heading list from outside to\ninside, starting from 1.\n\n\n\n\n\nDatabase.Tab\u00b6\nThis role adds a new tab at the database level. The only database tab\ncurrently in MongoDB Compass is Collections, which displays the\ncollections within the selected database.\n\n\n\nThe Database Tabs role supports the following options:\n\n\n\n\n\n\n\n\nField\nType\nRequired / Optional\nDescription\n\n\n\nComponent\nString\nRequired\nThe react component which draws the UI.\n\nName\nString\nRequired\nThe name of the tab.\n\nOrder\nInteger\nOptional\nThe order this tab appears in the tab list, starting from 1.\n\n\n\n\n\nCollection.Tab\u00b6\nThis role adds a new tab in the collection view. Currently, the\nfollowing collection tabs exist within MongoDB Compass:\n\nDocuments\nSchema\nExplain Plan\nIndexes\nValidation\nCharts\n\n\n\n\nThe Collection Tabs role supports the following options:\n\n\n\n\n\n\n\n\nField\nType\nRequired / Optional\nDescription\n\n\n\nComponent\nString\nRequired\nThe react component which draws the UI.\n\nName\nString\nRequired\nThe name of the tab.\n\nOrder\nInteger\nOptional\nThe order this tab appears in the tab list, starting from 1.\n\nminimumServerVersion\nDecimal\nOptional\nThe minimum server version required to use the component.\n\n\n\n\n\nCollectionHUD.Item\u00b6\nThis role exists at the collection level, displaying information in the\ntop-right corner of the collection GUI. CollectionHUD items display\nnumerical information relevant to the collection currently being viewed\nby the user. Currently, MongoDB Compass uses this space to show a count, total\nsize, and average size of documents and indexes in a collection.\n\n\n\n\nTip\nThe information shown by this role is meant to be supplemental. It\nshould not distract the user from the content of the collection\ntabs. As such, it is recommended to keep the information in this\nrole text-based, and refrain from visual cues.\n\nThe CollectionHUD Items role supports the following options:\n\n\n\n\n\n\n\n\nField\nType\nRequired / Optional\nDescription\n\n\n\nComponent\nString\nRequired\nThe react component which draws the UI.\n\nName\nString\nRequired\nThe name of the item.\n\nOrder\nInteger\nOptional\nThe order of the item going from left to right, starting from 1.\n\n\n\n\n\n\nWriting Your Plugin\u00b6\nMongoDB Compass plugins are written in ReactJS,\nwhich is comprised of stores,\nactions and\ncomponents.\n\nStores keep track of state information and pass that information\nto components.\nComponents receive information from the store and update the\nuser interface.\nActions are how components communicate with the store to trigger\nchanges.\n\n\nStores\u00b6\nA store is responsible for storing and\nmaintaining the\nstate of the\nReact/Flux application architecture used by MongoDB Compass plugins. The\nstore responds to actions, resulting in state changes which are the\nreflected by the component view.\nThis data flow is shown in the following diagram:\n\n\n\nStores listen to\nactions.\nComponents subscribe to stores.\n\nNote\nFor more information on stores, refer to the\nRedux documentation.\n\n\n\nDefining Stores\u00b6\n\nNote\nMongoDB Compass uses Reflux 0.4.1, so stores need to be defined using the\nReflux 0.4.1 syntax. For details on creating data stores in Reflux\n0.4.1, see the\nReflux documentation.\n\n\nOptional\nYou can use the Reflux State Mixin package to make the store\nbehave more like a React component. For more information on this\npackage, see the\npackage documentation.\n\nStores typically listen to a set of actions defined in ./src/actions.\nA store can only subscribe to other stores during execution of the\nonActivated method. Otherwise, the subscription may fail if the\nother store has not yet been loaded.\nThe onActivated method is called once all plugins are activated, so\nactions involving external stores should be called in this method.\nFor details on the activation stage of a plugin, see\nActivation.\n\nExample\nimport Reflux from 'reflux';\nimport StateMixin from 'reflux-state-mixin';\nimport Actions from 'actions';\n\nconst MyStore = Reflux.createStore({\n\n  mixins: [StateMixin.store],\n\n  listenables: Actions,\n\n  /**\n   * return the initial store state\n   */\n  getInitialState: function() {\n    return { connected: false };\n  },\n\n  /**\n   * called when all plugins are activated. Subscribe to external stores here.\n   */\n  onActivated: function(appRegistry) {\n    appRegistry.getStore('ExternalStore').listenTo(this.handleExternalChange.bind(this));\n    appRegistry.on('data-service-connected', this.onConnected.bind(this));\n  },\n\n  /**\n   * called when a connection has been established (or failed to establish).\n   */\n  onConnected: function(error, dataService) {\n    if (!error) {\n      dataService.command({ ping: 1 }, (err, result) => {\n        if (!err) {\n          this.setState({ connected: true });   // this triggers the store\n        }\n      });\n    }\n  },\n\n  handleExternalChange(extState) {\n    // Do something here.\n  }\n});\n\nexport default MyStore;\nexport { MyStore };\n\n\n\n\n\nRegistering Stores\u00b6\nIf a plugin needs to use an external store or register a store for\nother plugins to use, you must add the target store to the\napplication registry.\n\nExample\nimport MyStore from 'stores';\n\nconst activate(appRegistry) => {\n   appRegistry.registerStore('MyPlugin.MyStore', MyStore);\n};\n\n\n\n\n\nActions\u00b6\nUser inputs trigger actions. For example: button clicks, link clicks\nand text entry.\n\n\nDefining Actions\u00b6\nFor information on defining actions and code examples, see the\nRefluxJS Documentation.\n\n\nRegistering Actions\u00b6\nIf a plugin needs to use an external action or register an action for\nother plugins to use, you must add the target action to the\napplication registry\nThe common pattern is to define all the actions in a single object and\nregister them all at once.\n\nExample\nconst Actions = Reflux.createActions([\n   'buttonClicked',\n   'formSubmitted'\n ]);\n\n const activate(appRegistry) => {\n   appRegistry.registerAction('MyPlugin.Actions', Actions);\n };\n\n\n\n\n\nListening to Actions\u00b6\nTo ensure that the flow of data through the application happens in a\nsingle direction, stores are the only object\ntype which should listen to actions. A store can listen to any plugin\u2019s\nactions.\n\nExample\nconst Actions = require('../actions');\n\nconst MyPluginStore = Reflux.createStore({\n\n  init: function() {\n    Actions.buttonClicked.listenTo(this.handleButtonClicked.bind(this));\n  },\n\n  onActivated: function(appRegistry) {\n    const actions = appRegistry.getAction('MyPlugin.Actions');\n    actions.formSubmitted.listenTo(this.handleFormSubmitted.bind(this));\n  },\n\n  handleButtonClicked: function() {\n    // Do something\n  },\n\n  handleFormSubmitted: function() {\n    // Do something\n  }\n});\n\n\n\n\n\nComponents\u00b6\nComponents in a plugin make up the user interface.\n\n\nDefining Components\u00b6\nComponents are defined using\nES6 classes and use the\nReact prop-type module\nto validate properties.\nUser interface actions that require\napplication state changes should fire Reflux actions. State changes\nforce the component to re-render. Styles should be imported from a\nlocal .less file with the same filename as the component.\nMongoDB Compass uses the Node package\nclassnames to provide\nclass names to components.\n\nExample\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport styles from './my-component.less';\n\nclass MyComponent extends Component {\n\n  static propTypes = {\n    editable: PropTypes.bool.isRequired\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = { active: true };\n  }\n\n  handleClick() {\n    this.setState({ active: !this.state.active });\n  }\n\n  render() {\n     return (\n      <div className={classnames(styles.root)}>\n        <h2 className={classnames(styles.title)}>My Component</h2>\n         <button\n          className={classnames(styles.button)}\n           type=\"button\"\n          disabled={this.props.editable}\n           onClick={this.handleClick.bind(this)}\n         >\n           {this.state.active ? \"Active\" : \"Inactive\"}\n       </button>\n      </div>\n    );\n   }\n }\n\n export default MyComponent;\n export { MyComponent };\n\n\n\nFor more information on components, refer to the\nReactJS documentation.\n\n\nRegistering Components\u00b6\nIf a plugin needs to use an external component or register a component\nfor other plugins to use, you must add the target component to the\napplication registry in\n./src/index.js.\n\nExample\nimport MyComponent from './plugin';\n\nconst activate(appRegistry) => {\n  appRegistry.registerComponent('MyPlugin.MyComponent', MyComponent);\n};\n\n\n\n\n\n\nMongoDB Compass Application Registry\u00b6\nThe application registry is the object that holds all of the plugin\u2019s\nstores, actions,\ncomponents and\nroles.\nThe registry is globally available to all plugins through the\nglobal.hadronApp.appRegistry object.\n\n\nLifecycle Hooks\u00b6\nThe following sections outline the lifecycle stages of a MongoDB Compass Plugin\nin the context of the application registry:\n\nActivation\u00b6\nWhen a plugin first loads, MongoDB Compass calls the activate method in the\nplugin\u2019s root index.js file. This is where the plugin registers\nvarious objects with the application registry for other plugins to use.\nThe following is an example from the media player plugin found in\nthis tutorial:\nfunction activate(appRegistry) {\n   // Register the MediaPlayerPlugin as a role in Compass\n   //\n   // Available roles are:\n   //   - Instance.Tab\n   //   - Database.Tab\n   //   - Collection.Tab\n   //   - CollectionHUD.Item\n   //   - Header.Item\n\n   appRegistry.registerRole('Collection.Tab', ROLE);\n   appRegistry.registerAction('MediaPlayer.Actions', MediaPlayerActions);\n   appRegistry.registerStore('MediaPlayer.Store', MediaPlayerStore);\n}\n\n\nWhen plugin activation is completed, the application registry is also\npassed to any store in the registry containing\nan onActivated method. This guarantees that all pieces of the\nplugin have been registered before any plugin tried to pull another\nitem from the registry.\n\nExample\nconst MyPluginStore = Reflux.createStore({\n\n   onActivated: function(appRegistry) {\n     // Do potential stuff here.\n   }\n });\n\n\n\nEverything registered in the application registry is available for use\nby other plugins. For example, a plugin could listen for query changes\nand perform some action in response:\nconst MyPluginStore = Reflux.createStore({\n\n   onActivated: function(appRegistry) {\n     appRegistry.getStore('Query.ChangedStore').listenTo(this.handleQueryChange.bind(this));\n   },\n\n   handleQueryChange: function(query) {\n      debug(query.filter);\n      debug(query.project);\n      debug(query.sort);\n      debug(query.skip);\n      debug(query.limit);\n    }\n});\n\n\n\n\nConnection\u00b6\nPlugins can also access the connection lifecycle to know when the\ndata service has established a connection to the server and is ready to\naccept requests. Plugins that access the data service directly need to\nimplement this method.\n\nExample\nconst PingStore = Reflux.createStore({\n\n   onActivated(appRegistry) {\n     appRegistry.on('data-service-connected', this.onConnected.bind(this));\n   },\n\n   onConnected: function((error, dataService)) {\n     if (!error) {\n       dataService.command({ ping: 1 }, (err, result) {\n         if (!err) {\n           this.trigger(result);\n         }\n       });\n     }\n   },\n});\n\n\n\n\n\nQuery Changes\u00b6\nThe onQueryChanged method is called on all registered stores when\nthe MongoDB Compass query has been changed and executed. The query object\npassed to the method includes the following fields:\n\nFilter\nProject\nSort\nSkip\nLimit\n\nFor details on these fields, see Query Bar.\n\nExample\nconst QueryListenerStore = Reflux.createStore({\n\n   onActivated(appRegistry) {\n     appRegistry.on('query-applied', this.onQueryChanged.bind(this));\n   },\n\n   onQueryChanged: function(query) {\n     const projection = query.project;\n     const sort = query.sort;\n     ...\n   }\n});\n\n\n\n\n\nNamespace Changes\u00b6\nPlugins that need to be informed of namespace changes can implement\nnamespace lifecycle methods on stores that are\nregistered with the application registry. The full namespace is passed\nto the function.\n\nExample\nconst NameStore = Reflux.createStore({\n\n   onCollectionChanged: function(ns) {\n     this.setState({'namespace': ns});\n   },\n   onDatabaseChanged: function(ns) {\n     this.setState({'namespace': ns});\n   }\n});\n\n\n\n\n\n\nCustom Assets\u00b6\nTo add a custom asset such as an image to your MongoDB Compass plugin, place\nthe asset into the src/assets/images/ directory. You can display\nthe asset in a component using the component\u2019s render method.\nFor example, suppose you have a mongodb-logo.png image file in your\nsrc/assets/images/ directory. The following component code displays\nthe image:\nconst src = require('../../assets/images/mongodb-logo.png');\n\nrender() {\n   return (\n      <img src={src} />\n   )\n}\n\n\n\n\nStyling\u00b6\nWith the new web-pack enabled plugin model (v1.0.0+), MongoDB Compass plugins\nimplement CSS Modules\nand Less syntax to add styling to components.\nStyles are scoped locally to a component. Style definitions exist\ndirectly next to a component\u2019s implementation. See the following\nfile structure for details:\ncomponents\n\u2514\u2500\u2500 my-component\n     \u251c\u2500\u2500 index.js\n     \u251c\u2500\u2500 my-component.jsx - React implementation of the component.\n     \u251c\u2500\u2500 my-component.less - Styles for this component.\n     \u251c\u2500\u2500 my-component.stories.js\n     \u2514\u2500\u2500 my-component.spec.js\n\n\nFor a component with the name MyComponent, the directoy is called\nmy-component, and the style file inside this directory is\nmy-component.less.\n\nNote\nSee the structure of a plugin to view the\nfull plugin folder structure.\n\n\nExample\u00b6\nConsider the following implementation of a component called\nMyComponent:\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport styles from './my-component.less';\n\nclass MyComponent extends Component {\n\n  render() {\n    return (\n      <div className={classnames(styles.root)}>\n        <h2 className={classnames(styles.title)}>This is a title.</h2>\n      </div>\n    );\n  }\n}\n\nexport default MyComponent;\nexport { MyComponent };\n\n\nThis component might have styles defined in my-component.less in\nthe following manner:\n.root {\n   background: #0e83cd;\n   color: #fff;\n   height: 100vh;\n   padding: 2.4rem;\n }\n\n .title {\n   margin-top: 0;\n}\n\n\nNotice how the style file is imported at the top of the implementation\nfile. This root and title elements are then accessible as keys\nin the styles object in the .less file.\nTogether with the\nclassnames helper\npackage, these keys can be passed as class names to the DOM elements\nas in the following example:\n<div className={classnames(styles.title)}>...</div>\n\n\nThis code generates a DOM element with the following style class:\n<div class=\".MyPlugin_my-component-title__2Nklg\">...</div>\n\n\nNotice that this element has the plugin name prefixed, followed by the\nblock component (in this case my-component), then the element (in\nthis case -title), and finally a unique hash suffix to guarantee\nuniqueness. This hash guarantees uniqueness across different plugins.\n\nNote\nIn general, developers do not have to worry about the generated\nclass name.\n\n\n\nUsing Classnames for Cleaner Class Name Construction\u00b6\nThe classnames package\nallows elegant string construction for complex class names.\nTo see how complex dynamic class names can be generated in ReactJS, see\nthis example.\n\n\n\nRunning Your Plugin\u00b6\nRun the following command from your plugin\u2019s root directory to build\nthe plugin:\nnpm run compile\n\n\nLaunch Compass to view your plugin.\n\n",
            "preview": "A newly initialized plugin template has the following folder structure:",
            "tags": "",
            "links": [
                "https://reactjs.org/docs/components-and-props.html",
                "https://reactjs.org/",
                "https://docs.mongodb.com/compass/current/query-bar/",
                "https://www.npmjs.com/package/classnames",
                "https://reactjs.org/docs/typechecking-with-proptypes.html",
                "https://docs.mongodb.com/compass/current/plugins/tutorial-video-player/",
                "http://lesscss.org/",
                "https://redux.js.org/docs/api/Store.html",
                "https://www.npmjs.com/package/reflux-state-mixin",
                "http://es6-features.org/",
                "https://github.com/reflux/refluxjs/tree/e34c2b7fb9199062cc587f883aeb1be233a3ef25",
                "https://redux.js.org/docs/Glossary.html",
                "https://github.com/css-modules/css-modules"
            ]
        },
        {
            "slug": "plugins/tutorial-ssh-tunnel-status/index.html",
            "title": "SSH Tunnel Status Plugin Tutorial \u2014 MongoDB Compass stable",
            "headings": [
                "SSH Tunnel Status Plugin Tutorial",
                "Introduction",
                "Prerequisites",
                "Creating the Plugin",
                "Creating the Store",
                "Creating the Component",
                "Styling the Component",
                "Running the Plugin"
            ],
            "text": "\nSSH Tunnel Status Plugin Tutorial\u00b6\n\nOn this page\n\nIntroduction\nPrerequisites\nCreating the Plugin\nCreating the Store\nCreating the Component\nStyling the Component\n\n\nRunning the Plugin\n\n\nEstimated time to complete: ~20 minutes\n\nIntroduction\u00b6\nThis tutorial walks through a MongoDB Compass plugin which displays the\nhostname and status of the SSH tunnel through which the user is\nconnected to Compass. This plugin only displays when the user connects\nto Compass through an SSH tunnel.\nThe SSH tunnel status is displayed in a\nheader item as highlighted in the\nfollowing image:\n\n\n\n\nNote\nThis plugin is already packaged with MongoDB Compass, so following\nthis tutorial and creating this plugin will not change Compass\u2019 visual\ncontents. The source code for this plugin is maintained internally\nby the MongoDB Compass development team.\nThis tutorial illustrates how to create and display a\nheader item in MongoDB Compass so you can\nemploy a similar approach when adding your own header items.\n\n\n\nPrerequisites\u00b6\n\nNote\nPlugins require MongoDB Compass 1.11 or later.\n\n\nInstall the latest version of MongoDB Compass for your operating system\nfrom the\nMongoDB Download Center.\n\nInstall the Node Version Manager (NVM):\n\nFor MacOS and Linux operating systems:\nFollow the installation instructions at\nhttps://github.com/creationix/nvm#install-script.\n\nFor Windows operating systems:\n\nDownload the nvm-setup.zip file from\nhttps://github.com/coreybutler/nvm-windows/releases.\nDecompress the downloaded .zip file and run nvm-setup.exe.\n\n\n\n\nInstall NodeJS via NVM:\nnvm install stable\n\n\n\nInstall the Khaos templating engine:\nnpm install -g khaos\n\n\n\nCreate the MongoDB Compass plugins directory. Compass looks for plugins in this\ndirectory:\n\nMongoDB Compass\nmkdir -p ~/.mongodb/compass/plugins\n\n\n\nMongoDB Compass Community Edition\nmkdir -p ~/.mongodb/compass-community/plugins\n\n\n\n\n\n\n\n\nCreating the Plugin\u00b6\nRun the following commands to create an empty plugin called ssh-tunnel-status.\n\nMongoDB Compass\ncd ~/.mongodb/compass/plugins\nkhaos create mongodb-js/compass-plugin ./ssh-tunnel-status\n\n\n\nMongoDB Compass Community Edition\ncd ~/.mongodb/compass-community/plugins\nkhaos create mongodb-js/compass-plugin ./ssh-tunnel-status\n\n\n\n\nWhen prompted, enter the following values:\n\n\n\n\n\n\nField\nDescription\n\n\n\nName\nssh-tunnel-status\n\n\n\n\nDescription\nDisplays the current status and port of the SSH tunnel\nthrough which the user is connected to Compass.\n\n\n\n\nRole\nHeader.Item\n\n\n\n\n\n\nFinally, run the following command to install the plugin\u2019s\ndependencies:\ncd ssh-tunnel-status && npm install\n\n\n\nCreating the Store\u00b6\nA store is responsible for storing and\nmaintaining the\nstate of the\nReact/Flux application architecture used by MongoDB Compass plugins. The\nstore responds to actions, resulting in state changes which are the\nreflected by the component view.\nThis data flow is shown in the following diagram:\n\n\n\nStores listen to\nactions.\nComponents subscribe to stores.\n\nNote\nFor more information on stores, refer to the\nRedux documentation.\n\nThe SSH tunnel status plugin\u2019s store is called SshTunnelStatus, and\nit has the following state variables:\n\n\n\n\n\n\nsshTunnel\nA boolean which is true if the user is connected to\nMongoDB Compass via an SSH tunnel, and false otherwise.\n\nsshTunnelHostname\nA string indicating the hostname of the SSH tunnel through which\nthe user is connected.\n\nsshTunnelPort\nA string indicating the port number of the SSH tunnel through which\nthe user is connected.\n\nsshTunnelHostPortString\nA string representing the concatenation of sshTunnelHostname\nand sshTunnelPort in the following form:\n{sshTunnelHostname}:{sshTunnelPort}\n\n\n\n\nImplementing the Store\u00b6\nUpdate src/stores/store.js to match the following:\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84import Reflux from 'reflux';\nimport StateMixin from 'reflux-state-mixin';\n\n/**\n * Host string max length.\n */\nconst HOST_STRING_LENGTH = 25;\n\n/**\n * Ssh Tunnel Status store.\n */\nconst SshTunnelStatusStore = Reflux.createStore({\n  /**\n   * adds a state to the store, similar to React.Component's state\n   * @see https://github.com/yonatanmn/Super-Simple-Flux#reflux-state-mixin\n   *\n   * If you call `this.setState({...})` this will cause the store to trigger\n   * and push down its state as props to connected components.\n   */\n  mixins: [StateMixin.store],\n\n  /**\n   * On activatetd listen to the connection.\n   *\n   * @param {AppRegistry} appRegistry - The app registry.\n   */\n  onActivated(appRegistry) {\n    appRegistry.on('data-service-connected', this.onConnected.bind(this));\n  },\n\n  /**\n   * when connected to a deployment, checks if the connection is via an ssh\n   * tunnel, and if so, extracts hostname and port from the connection model\n   * and sets the new state.\n   */\n  onConnected(err, ds) {\n    if (err) return;\n    const sshTunnel = ds.client.model.ssh_tunnel !== 'NONE';\n    const sshTunnelHostname = sshTunnel ? ds.client.model.ssh_tunnel_hostname : '';\n    const sshTunnelPort = sshTunnel ? ds.client.model.ssh_tunnel_options.dstPort : '';\n    const sshTunnelHostPortString = sshTunnel ? this._combineHostPort(\n      sshTunnelHostname, sshTunnelPort, true) : '';\n\n    this.setState({\n      sshTunnel,\n      sshTunnelHostname,\n      sshTunnelPort,\n      sshTunnelHostPortString\n    });\n  },\n\n  /**\n   * returns the combined host:port string, possibly truncated in the middle\n   * of the host.\n   * @param  {String} host       The hostname string\n   * @param  {String} port       The port string\n   * @param  {Boolean} truncate  Whether the string needs to be truncated\n   *\n   * @return {String}            The resulting host:port string\n   */\n  _combineHostPort(host, port, truncate) {\n    if (host.length >= HOST_STRING_LENGTH && truncate) {\n      return host.slice(0, 9) + '...' + host.slice(-9) + ':' + port;\n    }\n    return host + ':' + port;\n  },\n\n  /**\n   * Initialize the SSH Tunnel store state.\n   *\n   * @return {Object} initial store state.\n   */\n  getInitialState() {\n    return {\n      sshTunnel: false,\n      sshTunnelHostname: '',\n      sshTunnelPort: '',\n      sshTunnelHostPortString: ''\n    };\n  }\n});\n\nexport default SshTunnelStatusStore;\nexport { SshTunnelStatusStore };\n\n\n\n\n\nCreating the Component\u00b6\nThe SSH tunnel status plugin contains a\ncomponent, which is a view which renders\nbased on the SshTunnelStatus store.\nComponents are written in JSX, which allows HTML to be inserted and\nrendered elegantly with ReactJS. HTML is rendered by the render\nmethod.\n\nNote\nFor more information on components, refer to the\nReactJS documentation.\n\nUpdate src/components/ssh-tunnel-status/ssh-tunnel-status.jsx to match the following:\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport styles from './ssh-tunnel-status.less';\n\nclass SshTunnelStatus extends Component {\n  static displayName = 'SshTunnelStatusComponent';\n\n  // Indicate the property types of the state variables (for validation):\n  static propTypes = {\n    sshTunnel: PropTypes.bool,\n    sshTunnelHostPortString: PropTypes.string\n  };\n\n  // Set the default values of the state variables:\n  static defaultProps = {\n    sshTunnel: false,\n    sshTunnelHostPortString: ''\n  };\n\n  /**\n   * Render SshTunnelStatus component.\n   *\n   * @returns {React.Component} The rendered component.\n   */\n  render() {\n    // if the sshTunnel prop is false, do not render any html\n    if (!this.props.sshTunnel) {\n      return null;\n    }\n\n    return (\n      // else, render html based on the state variables\n      <div\n        data-test-id=\"ssh-tunnel-status\"\n        className={classnames(styles['ssh-tunnel-status'])}>\n        <i className=\"fa fa-lock\" aria-hidden />\n        <div className={classnames(styles['ssh-tunnel-status-label'])}>\n          <div className={classnames(styles['ssh-tunnel-status-label-is-static'])}>\n            SSH connection via:\n          </div>\n          <div className={classnames(styles['ssh-tunnel-status-string'])}>\n            {this.props.sshTunnelHostPortString}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// Export the store so it can be used by other pieces of our application\nexport default SshTunnelStatus;\nexport { SshTunnelStatus };\n\n\n\n\nStyling the Component\u00b6\nThe ssh-tunnel-status.jsx component imports its styles from the\nssh-tunnel-status.less file.\nUpdate src/components/ssh-tunnel-status/ssh-tunnel-status.less to\nmatch the following:\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40@import \"~less/compass/_theme.less\";\n\n.ssh-tunnel-status {\n  margin-left: 10px;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n  i {\n    &-lock { font-size: 12px; }\n    color: @green2;\n    flex-basis: auto;\n    flex-grow: 0;\n    flex-shrink: 0;\n    text-align: right;\n  }\n\n  &-label {\n    color: @gray0;\n    font-size: 12px;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    &-is-static {\n      font-size: 11px;\n      font-weight: bold;\n      color: @green2;\n      user-select: none;\n      -webkit-user-select: none;\n      text-transform: uppercase;\n      padding-left: 5px;\n      padding-right: 5px;\n    }\n  }\n\n  &-string {\n    text-decoration: none;\n  }\n}\n\n\nMongoDB Compass plugins utilize\nCSS Modules and\nLess syntax to style components.\nFor more information on styling your MongoDB Compass plugins, see\nStyling.\n\n\n\nRunning the Plugin\u00b6\nRun the following command from your plugin\u2019s root directory to build\nthe plugin:\nnpm run compile\n\n\nLaunch Compass to view your plugin.\n\nSee also\n\nCompass Plugin Reference\nReactJS Documentation\nRedux Documentation\n\n\n\n",
            "preview": "Estimated time to complete: ~20 minutes",
            "tags": "",
            "links": [
                "https://nodejs.org/en/",
                "https://reactjs.org/docs/components-and-props.html",
                "https://docs.mongodb.com/compass/current/plugins/reference/",
                "https://github.com/creationix/nvm",
                "http://khaos.io/",
                "http://lesscss.org/",
                "https://redux.js.org/docs/api/Store.html",
                "https://reactjs.org",
                "https://www.mongodb.com/download-center",
                "https://github.com/coreybutler/nvm-windows/releases",
                "https://redux.js.org/",
                "https://redux.js.org/docs/Glossary.html",
                "https://github.com/css-modules/css-modules"
            ]
        },
        {
            "slug": "plugins/tutorial-user-view/index.html",
            "title": "Database User View Tutorial \u2014 MongoDB Compass stable",
            "headings": [
                "Database User View Tutorial",
                "Introduction",
                "Prerequisites",
                "Creating the Plugin",
                "Creating the Store",
                "Creating the Component",
                "Styling the Component",
                "Running the Plugin",
                "Extending the Plugin"
            ],
            "text": "\nDatabase User View Tutorial\u00b6\n\nOn this page\n\nIntroduction\nPrerequisites\nCreating the Plugin\nCreating the Store\nCreating the Component\nStyling the Component\n\n\nRunning the Plugin\nExtending the Plugin\n\n\n\nIntroduction\u00b6\nThis tutorial demonstrates a Compass plugin which displays the\nusers of a database and their\nrespective roles.\nOnce complete, your plugin will look similar to the following:\n\n\n\n\n\nPrerequisites\u00b6\n\nNote\nPlugins require MongoDB Compass 1.11 or later.\n\n\nInstall the latest version of MongoDB Compass for your operating system\nfrom the\nMongoDB Download Center.\n\nInstall the Node Version Manager (NVM):\n\nFor MacOS and Linux operating systems:\nFollow the installation instructions at\nhttps://github.com/creationix/nvm#install-script.\n\nFor Windows operating systems:\n\nDownload the nvm-setup.zip file from\nhttps://github.com/coreybutler/nvm-windows/releases.\nDecompress the downloaded .zip file and run nvm-setup.exe.\n\n\n\n\nInstall NodeJS via NVM:\nnvm install stable\n\n\n\nInstall the Khaos templating engine:\nnpm install -g khaos\n\n\n\nCreate the MongoDB Compass plugins directory. Compass looks for plugins in this\ndirectory:\n\nMongoDB Compass\nmkdir -p ~/.mongodb/compass/plugins\n\n\n\nMongoDB Compass Community Edition\nmkdir -p ~/.mongodb/compass-community/plugins\n\n\n\n\n\n\n\n\nCreating the Plugin\u00b6\nRun the following commands to create an empty plugin called users.\n\nMongoDB Compass\ncd ~/.mongodb/compass/plugins\nkhaos create mongodb-js/compass-plugin ./users\n\n\n\nMongoDB Compass Community Edition\ncd ~/.mongodb/compass-community/plugins\nkhaos create mongodb-js/compass-plugin ./users\n\n\n\n\nWhen prompted, enter the following values:\n\n\n\n\n\n\nField\nDescription\n\n\n\nName\nusers\n\nDescription\nDisplays database users and their respective roles.\n\nRole\nDatabase.Tab\n\n\n\nThis plugin is uses the Database.Tab\nrole, meaning it exists in its own tab in the MongoDB Compass database view.\nFinally, run the following command to install the plugin\u2019s dependencies:\ncd users && npm install\n\n\n\nCreating the Store\u00b6\nA store is responsible for storing and\nmaintaining the\nstate of the\nReact/Flux application architecture used by MongoDB Compass plugins. The\nstore responds to actions, resulting in state changes which are the\nreflected by the component view.\nThis data flow is shown in the following diagram:\n\n\n\nStores listen to\nactions.\nComponents subscribe to stores.\n\nNote\nFor more information on stores, refer to the\nRedux documentation.\n\nThe user plugin\u2019s store is called UsersStore. It keeps the\nfollowing state variables:\n\n\n\n\n\n\nusers\nAn array of objects representing the users of the currently\nselected database. For details on the fields returned in these\nobjects, see User Object.\n\ndatabase\nA string representing the name of the currently selected\ndatabase. This string is used in the store to filter\nthe users displayed. Compass will only display users whose\nauthentication database is the database currently being viewed.\n\nerror\nAn optional object containing error\ninformation.\n\n\n\n\nUser Object\u00b6\nThe objects in the users state variable take the following form:\n\n\n\n\n\n\n_id\nA unique identifier for the user, incorporating the user\u2019s name\nand authentication database.\n\nuser\nThe user\u2019s username.\n\ndb\nThe database on which the user was created.\n\nroles\nAn array of objects representing the\nroles of the user and the\ndatabases in which those roles apply.\nFor example:\n\"roles\" : [\n  {\n    \"role\" : \"readWrite\",\n    \"db\" : \"test\"\n  }\n]\n\n\n\n\n\n\n\nNote\nA user can have roles pertaining to different databases than the\none on which they were created. For more information on roles, see\nRole-Based Access Control.\n\n\n\nImplementing the Store\u00b6\nUpdate src/stores/store.js to match the following:\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89import Reflux from 'reflux';\nimport StateMixin from 'reflux-state-mixin';\nimport UsersActions from 'actions';\n\nconst debug = require('debug')('mongodb-compass:stores:users');\n\n/**\n * Users store.\n */\nconst UsersStore = Reflux.createStore({\n  /**\n   * adds a state to the store, similar to React.Component's state\n   * @see https://github.com/yonatanmn/Super-Simple-Flux#reflux-state-mixin\n   *\n   * If you call `this.setState({...})` this will cause the store to trigger\n   * and push down its state as props to connected components.\n   */\n  mixins: [StateMixin.store],\n\n  /**\n   * listen to all actions defined in ../actions/index.jsx\n   */\n  listenables: UsersActions,\n\n  /**\n   * Initialize everything that is not part of the store's state.\n   */\n  init() {\n  },\n\n  /**\n   * This method is called when all plugins are activated.\n   */\n  onActivated(appRegistry) {\n    // Events emitted from the app registry:\n    appRegistry.on('database-changed', this.onDatabaseChanged.bind(this));\n  },\n\n  /**\n   * Initialize the Users store state. The returned object must\n   * contain all keys that you might want to modify with this.setState().\n   *\n   * @return {Object} initial store state.\n   */\n  getInitialState() {\n    return {\n      status: 'enabled',\n      users: [],\n      database: '',\n      error: null\n    };\n  },\n\n  _setDatabaseUsers(dbName) {\n    const filter = {db: dbName};\n\n    const findOptions = {\n      fields: { user: 1, db: 1, credentials: 1, roles: 1 }\n    };\n\n    window.app.dataService.find('admin.system.users', filter, findOptions,\n                               (findError, documents) => {\n      if (findError) {\n        this.setState({error: findError});\n        return;\n      }\n      this.setState({database: dbName});\n      this.setState({users: documents});\n    });\n  },\n\n  onDatabaseChanged(namespace) {\n    if (!namespace || namespace.includes('.') || namespace === this.state.database) {\n      return;\n    }\n    this._setDatabaseUsers(namespace);\n  },\n\n  /**\n   * log changes to the store as debug messages.\n   * @param  {Object} prevState   previous state.\n   */\n  storeDidUpdate(prevState) {\n    debug('Users store changed from', prevState, 'to', this.state);\n  }\n});\n\nexport default UsersStore;\nexport { UsersStore };\n\n\n\n\n\nCreating the Component\u00b6\nThe users view contains a component, which is a view which renders\nbased on the UsersStore store.\nComponents are written in JSX, which allows HTML to be inserted and\nrendered elegantly with ReactJS. HTML is rendered by the render\nmethod.\nUpdate src/components/users/users.jsx to match the following:\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport styles from './Users.less';\n\nclass Users extends Component {\n  static displayName = 'UsersComponent';\n\n  static propTypes = {\n    users: PropTypes.array.isRequired,\n    database: PropTypes.string,\n    error: PropTypes.object\n  };\n\n  static defaultProps = {\n    users: [],\n    database: '',\n    error: null\n  };\n\n  onClick = () => {\n    this.props.actions.toggleStatus();\n  }\n\n  /**\n   * Render Users component.\n   *\n   * @returns {React.Component} The rendered component.\n   */\n  render() {\n    return (\n      <div className={classnames(styles.root)}>\n        <h2 className={classnames(styles.title)}>{this.props.database} Users</h2>\n        <table>\n          <tr>\n            <th>User</th>\n            <th>Database</th>\n            <th>Role</th>\n          </tr>\n          {\n            this.props.users.map((user) => {\n              return user.roles.map((role) => {\n                return (\n                  <tr>\n                    <td>{user.user}</td>\n                    <td>{role.db}</td>\n                    <td>{role.role}</td>\n                  </tr>\n                 )\n               });\n            })\n          }\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Users;\nexport { Users };\n\n\nThis component displays a table showing each user whose authentication\ndatabase is the database currently being viewed, along with all of the\nroles assigned to that user.\n\n\nStyling the Component\u00b6\nThe users.jsx component imports its styles from the users.less\nfile also located in the src/components/users/ directory.\nUpdate src/components/users/users.less to match the following:\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17@import \"~less/compass/_theme.less\";\n\n.root {\n\tbackground: #0e83cd;\n\tcolor: @pw;\n\theight: 100vh;\n\twidth: 100vw;\n\tpadding: 2.4rem;\n}\n\n.title {\n\tmargin-top: 0;\n}\n\ntable {\n\twidth: 50vw;\n}\n\n\nMongoDB Compass plugins implement\nCSS Modules and\nLess syntax to style components.\nFor more information on styling your MongoDB Compass plugins, see\nStyling.\n\n\n\nRunning the Plugin\u00b6\nRun the following command from your plugin\u2019s root directory to build\nthe plugin:\nnpm run compile\n\n\nLaunch Compass to view your plugin.\n\n\nExtending the Plugin\u00b6\nOne option to extend this plugin is allowing the MongoDB Compass user to\nassign new user roles as well as edit and delete existing roles.\n\n",
            "preview": "This tutorial demonstrates a Compass plugin which displays the users of a database and their respective roles.",
            "tags": "",
            "links": [
                "https://nodejs.org/en/",
                "https://docs.mongodb.com/compass/current/plugins/reference/",
                "http://docs.mongodb.org/manual/core/security-users/",
                "https://github.com/creationix/nvm",
                "http://khaos.io/",
                "http://lesscss.org/",
                "https://redux.js.org/docs/api/Store.html",
                "https://www.mongodb.com/download-center",
                "http://docs.mongodb.org/manual/core/authorization/",
                "https://github.com/coreybutler/nvm-windows/releases",
                "https://redux.js.org/docs/Glossary.html",
                "https://github.com/css-modules/css-modules"
            ]
        },
        {
            "slug": "plugins/tutorial-video-player/index.html",
            "title": "Video Playback Plugin Tutorial \u2014 MongoDB Compass stable",
            "headings": [
                "Video Playback Plugin Tutorial",
                "Introduction",
                "Prerequisites",
                "Creating the Plugin",
                "Creating the Store",
                "Creating the Component",
                "Running the Plugin"
            ],
            "text": "\nVideo Playback Plugin Tutorial\u00b6\n\nOn this page\n\nIntroduction\nPrerequisites\nCreating the Plugin\nCreating the Store\nCreating the Component\n\n\nRunning the Plugin\n\n\n\nIntroduction\u00b6\nThis tutorial creates a MongoDB Compass plugin to view\nWebM videos embedded within documents\nin a MongoDB collection. While these videos must fit within the\nmaximum BSON document size of 16MB,\nthis is enough space to store several minutes of modest-quality video.\nOnce complete, your plugin will look similar to the following:\n\n\n\n\n\nPrerequisites\u00b6\n\nNote\nPlugins require MongoDB Compass 1.11 or later.\n\n\nInstall the latest version of MongoDB Compass for your operating system\nfrom the\nMongoDB Download Center.\n\nInstall the Node Version Manager (NVM):\n\nFor MacOS and Linux operating systems:\nFollow the installation instructions at\nhttps://github.com/creationix/nvm#install-script.\n\nFor Windows operating systems:\n\nDownload the nvm-setup.zip file from\nhttps://github.com/coreybutler/nvm-windows/releases.\nDecompress the downloaded .zip file and run nvm-setup.exe.\n\n\n\n\nInstall NodeJS via NVM:\nnvm install stable\n\n\n\nInstall the Khaos templating engine:\nnpm install -g khaos\n\n\n\nCreate the MongoDB Compass plugins directory. Compass looks for plugins in this\ndirectory:\n\nMongoDB Compass\nmkdir -p ~/.mongodb/compass/plugins\n\n\n\nMongoDB Compass Community Edition\nmkdir -p ~/.mongodb/compass-community/plugins\n\n\n\n\n\n\n\n\nCreating the Plugin\u00b6\nRun the following commands to create an empty plugin called media-player.\n\nMongoDB Compass\ncd ~/.mongodb/compass/plugins\nkhaos create mongodb-js/compass-plugin ./media-player\n\n\n\nMongoDB Compass Community Edition\ncd ~/.mongodb/compass-community/plugins\nkhaos create mongodb-js/compass-plugin ./media-player\n\n\n\n\nWhen prompted, enter the following values:\n\n\n\n\n\n\nField\nDescription\n\n\n\nName\nmedia-player\n\nDescription\nPlays WebM video files embedded in a MongoDB collection.\n\nRole\nCollection.Tab\n\n\n\nThis plugin is implemented with the Collection.Tab role, meaning it will reside in its own\ntab in the MongoDB Compass collection view.\nFinally, run the following command to install the plugin\u2019s dependencies:\ncd media-player && npm install\n\n\n\nCreating the Store\u00b6\nA store is responsible for storing and\nmaintaining the\nstate of the\nReact/Flux application architecture used by MongoDB Compass plugins. The\nstore responds to actions, resulting in state changes which are the\nreflected by the component view.\nThis data flow is shown in the following diagram:\n\n\n\nStores listen to\nactions.\nComponents subscribe to stores.\n\nNote\nFor more information on stores, refer to the\nRedux documentation.\n\nThe media player plugin\u2019s store is called MediaPlayerStore, and it\nkeeps the following state variables:\n\n\n\n\n\n\nvideoURLs\nAn array of strings where each string is a URL referring to a\nWebM video. These URLs are created using\nURL.createObjectURL,\nand must be deleted using\nURL.revokeObjectURL.\n\nstoreState\nA string indicating the current state of the store. Must be one of the following:\n\ninitial\nfetching\ndone\noutdated\n\n\n\nerror\nAn optional object containing error\ninformation.\n\n\n\n\nRegistering Actions\u00b6\nFirst you must register the actions that the store will respond to.\nMediaPlayerStore accepts the following two actions:\n\n\n\n\n\n\nfetchVideos\nFetch any documents matching the query bar\u2019s parameters.\n\nreset\nClear the store\u2019s query information and any stored state.\n\n\n\nUpdate src/actions/actions.js to include these actions in the\nMediaPlayerActions object:\n1\n2\n3\n4\n5\n6\n7\n8\n9import Reflux from 'reflux';\n\nconst MediaPlayerActions = Reflux.createActions([\n  'fetchVideos',\n  'reset'\n]);\n\nexport default MediaPlayerActions;\nexport { MediaPlayerActions };\n\n\n\n\nImplementing the Store\u00b6\nUpdate src/stores/store.js to match the following:\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176import Reflux from 'reflux';\nimport StateMixin from 'reflux-state-mixin';\nimport MediaPlayerActions from 'actions';\nimport toNS from 'mongodb-ns';\n\nconst debug = require('debug')('mongodb-compass:stores:media-player');\n\n/**\n * Return true iff an input buffer has the magic number indicating an\n * EBML structure, which may be a WebM file. This is a quick-and-dirty\n * proxy to filter out a subset of ineligible fields.\n */\nfunction isEBML(bin) {\n  const view = new Uint8Array(bin);\n  return view[0] === 0x1a &&\n         view[1] === 0x45 &&\n         view[2] === 0xdf &&\n         view[3] === 0xa3;\n}\n\n/**\n * Media Player store.\n */\nconst MediaPlayerStore = Reflux.createStore({\n  /**\n   * adds a state to the store, similar to React.Component's state\n   * @see https://github.com/yonatanmn/Super-Simple-Flux#reflux-state-mixin\n   *\n   * If you call `this.setState({...})` this will cause the store to trigger\n   * and push down its state as props to connected components.\n   */\n  mixins: [StateMixin.store],\n\n  /**\n   * listen to all actions defined in ../actions/index.jsx\n   */\n  listenables: MediaPlayerActions,\n\n  /**\n   * Initialize everything that is not part of the store's state.\n   */\n  init() {\n    this.filter = {};\n    this.sort = null;\n    this.project = null;\n    this.skip = 0;\n    this.limit = 0;\n\n    this.indexes = [];\n    this.ns = '';\n  },\n\n  /**\n   * This method is called when all plugins are activated. You can register\n   * listeners to other plugins' stores here.\n   *\n   * If this plugin does not depend on other stores, you can delete the method.\n   *\n   * @param {Object} appRegistry - app registry containing all stores and components\n   */\n  onActivated(appRegistry) {\n    // Events emitted from the app registry:\n    appRegistry.on('query-changed', this.onQueryChanged.bind(this));\n    appRegistry.getStore('App.NamespaceStore').\n                listen(this.onNamespaceChanged.bind(this));\n  },\n\n  /**\n   * Initialize the Media Player store state. The returned object must\n   * contain all keys that you might want to modify with this.setState().\n   *\n   * @return {Object} initial store state.\n   */\n  getInitialState() {\n    return {\n      storeState: 'initial',\n      error: null,\n      videoURLs: []\n    };\n  },\n\n  /**\n   * Event handler for query bar state changes.\n   */\n  onQueryChanged(state) {\n    if (state.ns && toNS(state.ns).collection) {\n      this.filter = state.filter;\n      this.project = state.project;\n      this.sort = state.sort;\n      this.skip = state.skip;\n      this.limit = state.limit;\n      this.ns = state.ns;\n\n      if (this.state.storeState === 'done') {\n        this.setState({storeState: 'outdated'});\n      }\n    }\n  },\n\n  /**\n   * Event handler for database/collection changes.\n   */\n  onNamespaceChanged() {\n    this.reset();\n  },\n\n  /**\n   * Action to release the current list of videos, and reset this\n   * store's data to a pristine state.\n   */\n  reset() {\n    for (const url of this.state.videoURLs) {\n      if (url) {\n        window.URL.revokeObjectURL(url);\n      }\n    }\n\n    this.setState(this.getInitialState());\n  },\n\n  /**\n   * Action to fetch any documents associated with the current query\n   * information associated with this MediaPlayerStore.\n   */\n  fetchVideos() {\n    if (this.state.storeState === 'fetching') {\n      return;\n    }\n\n    this.reset();\n\n    this.setState({storeState: 'fetching'});\n\n    const findOptions = {\n      sort: this.sort,\n      fields: this.project,\n      skip: this.skip,\n      limit: Math.min(5, this.limit)\n    };\n\n    window.app.dataService.find(this.ns, this.filter, findOptions,\n                                (findError, documents) => {\n      if (findError) {\n        this.setState({error: findError});\n        return;\n      }\n\n      const urls = [];\n      try {\n        for (const doc of documents) {\n          if (isEBML(doc.data.buffer)) {\n            const blob = new Blob([doc.data.buffer], {type: 'video/webm'});\n            urls.push(URL.createObjectURL(blob));\n          } else {\n            urls.push('');\n          }\n        }\n      } catch (error) {\n        this.setState({error: error});\n      }\n\n      this.setState({videoURLs: urls, storeState: 'done'});\n    });\n  },\n\n  /**\n   * log changes to the store as debug messages.\n   * @param  {Object} prevState   previous state.\n   */\n  storeDidUpdate(prevState) {\n    debug('MediaPlayer store changed from', prevState, 'to', this.state);\n  }\n});\n\nexport default MediaPlayerStore;\nexport { MediaPlayerStore };\n\n\n\n\n\nCreating the Component\u00b6\nThe media player contains a component, which is a view which renders\nbased on the MediaPlayerStore store.\nUpdate src/components/media-player/media-player.jsx to match the\nfollowing:\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport styles from './media-player.less';\n\nclass MediaPlayer extends Component {\n  static displayName = 'MediaPlayerComponent';\n\n  static propTypes = {\n    videoURLs: PropTypes.array.isRequired,\n    storeState: PropTypes.oneOf(['initial', 'fetching', 'done', 'outdated']),\n    error: PropTypes.object\n  };\n\n  static defaultProps = {\n    videoURLs: [],\n    storeState: 'initial',\n    error: null\n  };\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentWillMount() {\n    this.queryBar = window.app.appRegistry.getComponent('Query.QueryBar');\n  }\n\n  onApplyClicked() {\n    this.props.actions.fetchVideos();\n  }\n\n  onResetClicked() {\n    this.props.actions.reset();\n    this.props.actions.fetchVideos();\n  }\n\n  renderError() {\n    if (this.props.error) {\n      return (<div>{this.props.error}</div>);\n    }\n\n    return null;\n  }\n\n  renderContent() {\n    if (!_.includes(['done', 'outdated'], this.props.storeState)) {\n      return null;\n    }\n\n    return (\n      <div className=\"column-container\">\n        {this.renderError()}\n        <div className=\"column main\">\n          {this.props.videoURLs.map((url) => {\n            if (url) {\n              return <video className={classnames(styles.videoElement)} controls src={url}>No video support</video>;\n            }\n\n            return <div className={classnames(styles.videoElement)}>Does not contain a playable video</div>;\n          })}\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Render MediaPlayer component.\n   *\n   * @returns {React.Component} The rendered component.\n   */\n  render() {\n    return (\n      <div className={classnames(styles.root)}>\n        <div className=\"controls-container\">\n          <this.queryBar\n            buttonLabel=\"Find\"\n            onApply={this.onApplyClicked.bind(this)}\n            onReset={this.onResetClicked.bind(this)} />\n        </div>\n        {this.renderContent()}\n      </div>\n    );\n  }\n}\n\nexport default MediaPlayer;\nexport { MediaPlayer };\n\n\n\n\n\nRunning the Plugin\u00b6\nRun the following command from your plugin\u2019s root directory to build\nthe plugin:\nnpm run compile\n\n\nLaunch Compass to view your plugin.\n\n",
            "preview": "This tutorial creates a MongoDB Compass plugin to view WebM videos embedded within documents in a MongoDB collection. While these videos must fit within the maximum BSON document size of 16MB, this is enough space to store several minutes of modest-quality video.",
            "tags": "",
            "links": [
                "https://nodejs.org/en/",
                "https://docs.mongodb.com/compass/current/plugins/reference/",
                "https://github.com/creationix/nvm",
                "https://www.webmproject.org/",
                "http://khaos.io/",
                "https://redux.js.org/docs/api/Store.html",
                "https://docs.mongodb.com/manual/reference/limits/",
                "https://www.mongodb.com/download-center",
                "https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL",
                "https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL",
                "https://github.com/coreybutler/nvm-windows/releases",
                "https://redux.js.org/docs/Glossary.html"
            ]
        },
        {
            "slug": "query-bar/index.html",
            "title": "Query Bar \u2014 MongoDB Compass stable",
            "headings": [
                "Query Bar",
                "Filter",
                "Project",
                "Sort",
                "Skip",
                "Limit",
                "Run the Query",
                "Past Queries View",
                "Recent Queries",
                "Favorite Queries"
            ],
            "text": "\nQuery Bar\u00b6\nFrom the various Collections tabs, you can use the query bar to specify\nMongoDB queries.  For details, see Filter.\n\n\n\nYou can specify a query filter in the query bar. If you click\nOptions to expand the query bar, you also have access to\nthe project, sort, skip, and limit options of the query.\n\n\n\n\n\n\nFilter\nThe query.\n\nProject\nThe projection to determine the fields to return.  Specify the field and\n1 to include a field or 0 to exclude a field.\n\nSort\nThe sort order of the returned documents. To specify\nascending order for a field, specify the field and 1.\nTo specify descending order for a field, specify the field and -1.\n\nSkip\nThe number of matching documents to skip before returning\ndocuments.\n\nLimit\nThe upper limit for the number of documents to return.\n\n\n\n\nFilter\u00b6\nYou can type MongoDB queries into the query bar. In the filter\nexpression, you can use the various MongoDB query operators except for the $text query\noperator.\n\nTip\nIn the Schema tab, you can also use the Query Builder\nto enter a query into the query bar.\n\nAs you type, the Find button is disabled and the\nFilter label turns red until a valid query is entered.\nThe Compass Filter supports using the mongo\nshell mode representation of the MongoDB Extended JSON BSON data types.\nFor example, the following filter returns documents where\nstart_date is greater than than the BSON Date\n2017-05-01:\n{ \"start_date\": {$gt: new Date ('2017-05-01')} }\n\n\nBy specifying the Date type in both start_date and the $gt\ncomparison operator, Compass performs the greater than comparison\nchronologically, returning documents with start_date later than\n2017-05-01.\nWithout the Date type specification, Compass compares the\nstart_dates as strings\nlexicographically,\ninstead of comparing the values chronologically.\nTo specify an ObjectID,\nuse the format ObjectId('<id>'), as in the following filter example:\n{ \"_id\": ObjectId('59a87101f17fcbfbc9cd4374') }\n\n\n\n\nProject\u00b6\nIf the query bar has the Project option, you can specify\nwhich fields to return in the resulting data. By default, all fields\nare returned.\nTo set projection, click Options and enter in the\nprojection document:\n\nTo include fields, specify the field name and set to 1 in the\nproject document, as in the following example:\n{ year: 1, name: 1 }\n\n\nOnly the fields specified in the project document (and the _id\nfield if it is not set to 0 in project document) are returned.\n\nTo exclude fields, specify the field name and set to 0 in the\nproject document, as in the following example:\n{ year: 0, name: 0 }\n\n\nAll fields except for the fields specified in the project document\nare returned.\n\n\n\nNote\nWith the exception of the _id field, you cannot specify both\nfield inclusion and field exclusion in the project document. With\nthe _id field, you can specify its exclusion in a project\ndocument that specifies field inclusions. For example,\n{ year: 1, _id: 0 }.\n\nFor more information on projection, refer to the MongoDB Manual\nProjection.\n\n\nSort\u00b6\nIf the query bar has the Sort option, you can specify the\nsort order of the returned documents.\nTo set the sort order, click Options and enter in the sort\ndocument:\nTo specify ascending order for a field, set the field to 1 in the sort\ndocument. To specify descending order for a field, set the field and -1\nin the sort documents. For example, the following sort document sorts\nresults first by year in descending order, and within each year,\nsort by name in ascending order.\n{ year: -1, name: 1 }\n\n\nFor more information on sort, refer to the MongoDB Manual sort.\n\n\nSkip\u00b6\nIf the query bar has the Skip option, you can specify the\nfirst n-number of document to skip before returning the result set. To\nspecify the number of documents to skip, click Options and\nenter the number to skip.\nFor more information on skip, refer to the MongoDB Manual skip.\n\n\nLimit\u00b6\nIf the query bar has the Limit option, you can specify the\nmaximum number of documents to return. To specify the limit, click\nOptions and enter the limit.\nFor more information on limit, refer to the MongoDB Manual\nlimit.\n\n\nRun the Query\u00b6\nClick Find to run the query and view the updated results.\n\nNote\nFor large query result sets, the results are shown from a sampled set\nof documents.  Otherwise, Compass shows the entire result set.\nFor details on sampling, see the FAQ.\n\nTo clear the query bar and the results of the query, click Reset.\n\n\nPast Queries View\u00b6\nCompass automatically stores up to 20 most recent queries for each\ncollection. To view these queries, click on the history icon in the\nquery bar.\n\n\n\nFrom the past queries view, you can view the recent queries as well as\nthe queries saved as favorites for that collection.\n\nRecent Queries\u00b6\nYou can view up to 20 most recent queries for that collection. Click on\na listed query to populate the query bar with that query.\n\n\n\n\n\nFavorite Queries\u00b6\nFrom the list of recent queries for a collection, you can save queries\nas favorites. To view the list of queries saved as favorites, click on\nFavorites in the past queries view.\nTo save a query as a favorite, click on the star icon for the query.\nSpecify a name for the query and save.\n\n\n\n\n\n",
            "preview": "From the various Collections tabs, you can use the query bar to specify MongoDB queries. For details, see Filter.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/manual/reference/method/db.collection.find/",
                "https://docs.mongodb.com/compass/current/schema/",
                "http://docs.mongodb.org/manual/reference/operator/query/",
                "https://docs.mongodb.com/manual/reference/mongodb-extended-json/",
                "http://docs.mongodb.org/manual/reference/method/cursor.skip",
                "http://docs.mongodb.org/manual/reference/method/cursor.sort",
                "http://docs.mongodb.org/manual/reference/method/cursor.limit",
                "https://docs.mongodb.com/compass/current/faq/",
                "https://en.wikipedia.org/wiki/Lexicographical_order",
                "https://docs.mongodb.com/manual/reference/method/ObjectId/"
            ]
        },
        {
            "slug": "query-plan/index.html",
            "title": "Explain Plans \u2014 MongoDB Compass stable",
            "headings": [
                "Explain Plans",
                "Query Bar",
                "Visual Tree",
                "Raw JSON"
            ],
            "text": "\nExplain Plans\u00b6\n\nOn this page\n\nQuery Bar\nVisual Tree\nRaw JSON\n\n\nThe Explain Plan tab displays the execution plan for a\nquery.\nTo view the execution plan for a query filter, click on the collection\non the left hand pane, then click Explain Plan.\n\n\n\n\nQuery Bar\u00b6\n\nNote\nFor large query result sets, the results are shown from a sampled set\nof documents.  Otherwise, Compass shows the entire result set.\nFor details on sampling, see the FAQ.\n\nFrom the query bar, you can specify the query. If you click\nOptions to expand the query bar, you can also specify\nvarious options for the query.\nYou can type MongoDB queries into the query bar. In the query\nexpression, you can use the various MongoDB query operators except for the $text query\noperator.\nAs you type, the Explain button is disabled and the\nFilter label turns red until a valid query is entered.\nFilter syntax requires strict extended JSON types. For details on using the\nquery bar, see Filter.\n\n\nVisual Tree\u00b6\nYou can view the explain stages in a tree format. Each stage of the\npipeline appears as a node on the tree. This makes sharded cluster\noutputs easier to understand and visualize.\n\n\n\n\n\nRaw JSON\u00b6\nYou can also view the explain details in raw JSON format:\n\n\n\nFor more information about execution plans, please see the\nMongoDB documentation.\n\n",
            "preview": "The Explain Plan tab displays the execution plan for a query.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/compass/current/query-bar/",
                "http://docs.mongodb.org/manual/reference/operator/query/",
                "http://docs.mongodb.org/manual/reference/mongodb-extended-json/",
                "http://docs.mongodb.org/manual/tutorial/analyze-query-plan/",
                "https://docs.mongodb.com/compass/current/faq/"
            ]
        },
        {
            "slug": "release-notes/index.html",
            "title": "Release Notes \u2014 MongoDB Compass stable",
            "headings": [
                "Release Notes",
                "MongoDB Compass 1.11",
                "MongoDB Compass 1.10",
                "MongoDB Compass 1.9",
                "MongoDB Compass 1.8",
                "MongoDB Compass 1.7",
                "MongoDB Compass 1.6",
                "MongoDB Compass 1.5",
                "MongoDB Compass 1.4",
                "MongoDB Compass 1.3",
                "1.3.0-beta.3 - July 12, 2016",
                "1.3.0-beta.2 - June 29, 2016",
                "1.3.0-beta.0 - June 27, 2016",
                "MongoDB Compass 1.2",
                "1.2.0-beta.3 - June 23, 2016",
                "1.2.0-beta.2 - June 1, 2016",
                "1.2.0-beta.1 - May 10, 2016",
                "MongoDB Compass 1.1",
                "1.1.1 \u2013 Jan 19, 2016",
                "MongoDB Compass 1.0",
                "1.0.1 \u2013 Dec 18, 2015"
            ],
            "text": "\nRelease Notes\u00b6\n\nOn this page\n\nMongoDB Compass 1.11\nMongoDB Compass 1.10\nMongoDB Compass 1.9\nMongoDB Compass 1.8\nMongoDB Compass 1.7\nMongoDB Compass 1.6\nMongoDB Compass 1.5\nMongoDB Compass 1.4\nMongoDB Compass 1.3\nMongoDB Compass 1.2\nMongoDB Compass 1.1\nMongoDB Compass 1.0\n\n\n\nMongoDB Compass 1.11\u00b6\n\nAdded support for plugins\nthat extend the functionality of MongoDB Compass.\nAdded support for disconnecting from the active\nMongoDB instance without restarting MongoDB Compass.\nAdded Table View for documents as a\nmethod of viewing the contents of a collection in tabular format.\n\n\n\nMongoDB Compass 1.10\u00b6\nReleased Oct 25, 2017\n\nNow available in two editions, Compass Community and Compass.\nCompass provides the following features not in the Community edition:\n\nKerberos Authentication\nLDAP Authentication\nx509 Authentication\nSchema Analysis\nReal Time Server Stats\nDocument Validation\n\n\n\n\n\nMongoDB Compass 1.9\u00b6\nReleased Oct, 2017\n\nAdded autocomplete functionality to the query bar.\n\n\nQuery History\nCompass automatically stores up to 20 most recent queries for each\ncollection. From the past queries view for a collection, you can\nview the recent queries as well as the\nqueries saved as favorites . For more\ninformation, see Past Queries View.\n\n\n\n\nDeployment Awareness\nWhen a user connects to a MongoDB instance,\nCompass now displays:\n\nThe connection name if the connection is a favorite connection or\n\u201cMy Cluster\u201d if it is not.\nThe type of deployment (standalone, replica set, sharded cluster).\nIf the deployment is a replica set and the replica set name is\nspecified in the connection window, the number of replica set\nmembers will also be displayed.\n\nFor more information, see MongoDB Instance.\n\n\n\n\n\n\nMongoDB Compass 1.8\u00b6\nReleased Aug 2, 2017\n\nDocuments tab is the default\nSchema sampling only on demand\nExplain executed only on demand\nImproved Document Editing\nDeployment Awareness (and read preference)\nAdded ability to specify replica set name and read preference in\nconnection screen.\nAdded ability to parse MongoDB URI string in the connection screen.\n\n\nAllow typing index field names in addition to dropdown\nUse Client Meta Data to identify Compass application name in server logs\nNew Loading animation\n\n\n\nMongoDB Compass 1.7\u00b6\nReleased Jun 7, 2017\n\nAdded ability to include options in the query bar.\nAdded ability to add or delete database/collection from the left-hand navigation sidebar.\nAdded ability to collapse the left-hand navigation sidebar.\n\n\n\nMongoDB Compass 1.6\u00b6\nReleased Mar 1, 2017\n\nAdded support for Linux: Ubuntu 14.04+ and RHEL 7+.\nAdded ability to zoom in and zoom out of panels.\n\n\n\nMongoDB Compass 1.5\u00b6\nReleased Nov 29, 2016\n\nAdded ability to create and drop databases.\nAdded ability to create and drop collections.\nAdded ability to create indexes.\nAdded support for document validation.\nImproved security when connecting to Atlas. During Connection setup,\nMongoDB Compass supports the use of System Certificate Authority for\nTLS/SSL connections to Atlas Deployment.\nProvides Real Time Performance stats.\n\n\n\nMongoDB Compass 1.4\u00b6\nReleased Nov 1, 2016\n\nAdd support for connecting to Atlas.\nVarious bug fixes and improvements.\n\n\n\nMongoDB Compass 1.3\u00b6\nReleased Sep 15, 2016\n\n1.3.0-beta.3 - July 12, 2016\u00b6\n\nAllow specifying the value of the _id field when inserting new\ndocuments.\nSet the default field and value sizes to 1 when adding a new key\nto a document.\nTyping \u201c:\u201d in the key input field tabs to the value input field when\nediting a document.\nOnly allow addition of one element at a time if the field name in the\nnew element is blank when editing a document.\nCRUD documentation now available in the application help menu.\nFix element autofocus on add.\n\n\n\n1.3.0-beta.2 - June 29, 2016\u00b6\n\nBug: Small Bug Fixes identified at MongoDB World\n\n\n\n1.3.0-beta.0 - June 27, 2016\u00b6\n\nNew: CRUD single document create, update, delete\nNew: SSH tunnel support\nNew: Tree explain plan view\nNew: Geographic query builder and visualization\nExplicit opt-in for \u201c3rd party maps\u201d usage\nImprove display of binary data in in the document viewer\nQuery builder on numeric histograms should leave bounds open\nIntercom overlay button now visible\nLoad preferences defensively, catching parsing errors and reset preferences\nCompass Treasure Hunt for MongoDB World\n\n\n\n\nMongoDB Compass 1.2\u00b6\nReleased Jun 27, 2016\n\nBeta installs alongside the stable release as a distinct application,\nwith distinct preferences\nIndex view\nExplain plan view\nDocuments view moved to a separate tab\nAutomatic updates\n\n\n1.2.0-beta.3 - June 23, 2016\u00b6\n\nBug: Feature Tour does not show on first launch\nBug: Compass fails to start with JavaScript error in main process:\nSyntaxError: Unexpected end of input\nBug: No error displayed message when an authentication error occurs\nBug: Compass does not handle $indexStats fetch failure on MongoDB 3.2\n\n\n\n1.2.0-beta.2 - June 1, 2016\u00b6\n\nNEW: Added explain plan view\nAdded feature tour points of new 1.2 features\nBugfix: After increasing maxTimeMS timeout, query default falls back\nto 100 docs\n\n\n\n1.2.0-beta.1 - May 10, 2016\u00b6\n\n\n\nMongoDB Compass 1.1\u00b6\nReleased Jan 19, 2016\n\n1.1.1 \u2013 Jan 19, 2016\u00b6\n\n\n\nMongoDB Compass 1.0\u00b6\nReleased Dec 7, 2015\nMongoDB Compass 1.0 is now available. It helps users\nto visually analyze and understand their MongoDB data.\n\n1.0.1 \u2013 Dec 18, 2015\u00b6\n\nBug Fixes\u00b6\n\nQuery builder bug in unique minicharts when resetting\nHang: Do something graceful after closing/opening laptop lid & using\nCompass again\nError in Compass.app/Contents/Resources/app/node_modules/scout-server/lib/models/token.js:20\nPass readPreference.nearest in lib/routes/collection.js\nEnterprise/Community version not correctly detected for MongoDB 2.6, 3.0\nCompass hangs when upper case host alias used in connection\nReduce reservoir sampling limit to 10,000 documents\nPossible race condition when reading from IndexedDB\nCannot access DBs with colon (\u201c:\u201d) in their name\nCannot read property 'authInfo' of undefined in mongodb-instance-model/lib/fetch.js:297\nCannot access DBs with octothorp (#) in their name\nFailure to sample on first collection selected\n\n\n\nImprovements\u00b6\n\nObjectID visualization missing last tooltip\nChange intercom message/menu item to \u201cProvide Feedback\u201d\nOpen external links in user\u2019s web browser, not Electron\nPlace SSL \u201cClient Certificate\u201d field above \u201cClient Private Key\u201d\nRe-enable highlighting/selecting of some UI elements\nReplace Help entry stubs with actual text\nUse consistent titles across windows\nSimplify language in opt-in panel\nReduce font size of header to accommodate full db.collection name\nRemove \u201c\u2013\u201d (minimize) on Intercom\nRun shrinkwrap to lock Compass 1.0 dependencies\nConfirm successful Evergreen builds from release-1 branch\nCompass fails to connect to hostname\n\n\n\n\n",
            "preview": "Now available in two editions, Compass Community and Compass.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/compass/current/indexes/",
                "https://docs.mongodb.com/compass/current/",
                "https://docs.mongodb.com/compass/current/schema/",
                "https://docs.mongodb.com/compass/current/validation/",
                "https://docs.mongodb.com/compass/current/query-bar/",
                "https://docs.mongodb.com/compass/current/documents/",
                "https://docs.mongodb.com/compass/current/databases/",
                "https://docs.mongodb.com/compass/current/collections/",
                "https://docs.mongodb.com/compass/current/plugins/creating-compass-plugins/",
                "https://docs.mongodb.com/compass/current/connect/",
                "https://docs.mongodb.com/compass/current/performance/",
                "https://docs.mongodb.com/compass/current/instance/"
            ]
        },
        {
            "slug": "schema/index.html",
            "title": "Schema \u2014 MongoDB Compass stable",
            "headings": [
                "Schema",
                "Schema Tab",
                "Query Bar",
                "Charts",
                "Field with Single Type Values",
                "Field with Multiple Type Values",
                "Missing Field",
                "Strings",
                "Numbers",
                "Dates and ObjectIDs",
                "Embedded Documents and Arrays",
                "GeoJSON and [latitude,longitude] Arrays",
                "View Charts of Mixed Types",
                "Query Builder",
                "Click the chart value.",
                "Optional. Select multiple values.",
                "Optional. Click on other field values to create a compound query.",
                "Optional. Deselect a value.",
                "Run the query"
            ],
            "text": "\nSchema\u00b6\n\nOn this page\n\nSchema Tab\nQuery Bar\nCharts\nQuery Builder\n\n\nNot Available in Compass Community Edition\n\nSchema Tab\u00b6\nThe Schema tab reports on the documents in the collections.\nThe report is based on sampling of the documents in the collection.\n\n\n\nTo access the Schema tab for a collection, click on a\ncollection on the left hand pane and select the Schema tab.\n\n\nQuery Bar\u00b6\n\nNote\nFor large query result sets, the results are shown from a sampled set\nof documents.  Otherwise, Compass shows the entire result set.\nFor details on sampling, see the FAQ.\n\nFrom the query bar in the Schema tab, you can specify the\nquery, and if you click the Options, you can also specify\nquery options.\n\n\n\nYou can type MongoDB queries into the query bar. In the query\nexpression, you can use the various MongoDB query operators except for the $text query\noperator.\nAs you type, the Analyze button is disabled and the\nFilter label turns red until a valid query is entered.\nFilter syntax requires strict extended JSON types. For details on using the\nquery bar, see Filter.\n\nTip\nIn the Schema tab, you can also use the Query Builder to\nenter a query into the query bar.\n\n\n\nCharts\u00b6\nFor a field, Compass displays the data types and values with various\ncharts. The data type information is on the left hand side; the field\nvalue information is on the right.\n\nField with Single Type Values\u00b6\nBelow is an example of a chart showing a field called last_login\nwhich contains data of type date.\n\n\n\n\n\nField with Multiple Type Values\u00b6\nThe charts also display a percentage breakdown for fields with varying\ndata types across documents. In the example below,\nthe chart shows the contents of a field called phone_no in which\n81% of documents are of type string, and the remaining 19% are of\ntype number.\n\n\n\n\n\nMissing Field\u00b6\nIf a collection contains documents in which not all fields contain\na value, the missing values display as undefined. In the example\nbelow, the field age has no recorded value in 40% of the sampled\ndocuments.\n\n\n\n\n\nStrings\u00b6\nStrings can appear in three different ways. If there are\nentirely unique strings in a field, Compass shows a random\nselection of string values from the specified field. Click\nthe circular refresh icon to see\na new set of randomly selected values from the field.\n\n\n\nIf there are only a few different string values,\nCompass shows the strings in a single graded bar which\nshows the percentage of the population of the string values.\n\n\n\nIf there are multiple string values with some duplicates,\nCompass shows a histogram indicating the frequency of\neach string found within the field.\n\n\n\n\nNote\nMove the mouse over each bar to display a tooltip which shows the\nvalue of the string.\n\n\n\nNumbers\u00b6\nNumbers are similar to strings in their representation.\nEntirely unique numbers are shown in the following manner:\n\n\n\nDuplicate numbers are shown in a histogram that indicates their\nfrequency:\n\n\n\n\n\nDates and ObjectIDs\u00b6\nFields that represent dates (and fields that contain the ObjectID\ndata type, which includes a timestamp) are shown across multiple\nbar charts. The two charts on the top row represent the day of the\nweek and time of day of the timestamp value.\nThe single chart on the bottom shows the first and last timestamp\nvalue, and the vertical lines represent the distribution of the\ntimestamp across the range of first to last.\n\n\n\n\n\nEmbedded Documents and Arrays\u00b6\nFields that contain a sub-document or an array are displayed with\na small triangle next to them and a visual representation of the\ndata contained within the sub-document or array.\n\n\n\nClick on the triangle to expand the field and view the embedded\ndocuments:\n\n\n\n\n\nGeoJSON and [latitude,longitude] Arrays\u00b6\nFields that contain GeoJSON data or [latitude,longitude] arrays are\ndisplayed with interactive maps.\n\n\n\n\n\nView Charts of Mixed Types\u00b6\nIf a field has mixed types, you can view different charts of each type\nby clicking on the type field. In the example below, the age\nfield shows the values that are strings:\n\n\n\nClicking on the number type causes the chart to show its numeric\ndata:\n\n\n\n\n\n\nQuery Builder\u00b6\nIn the Schema tab, you can type the filter manually into\nthe query bar or generate the filter with the Compass query builder.\n\nTip\nYou can compose the initial query filter by using the clickable query\nbuilder and then manually edit the generated filter to your exact\nrequirements.\n\nComposing $OR filter conditions is not yet possible with the\nclickable query builder, but you can manually enter them in the query\nbar.\n1\nClick the chart value.\u00b6\nIn the Schema view, you can click on a chart value to\nbuild a query. For example, the following image shows the query\nfilter built by clicking the EWR value for the\ndepartureAirportFsCode field.\n\n\n\n\n2\nOptional. Select multiple values.\u00b6\nTo select multiple values for a field, click and drag the cursor\nover a selection of values, or press shift+click on the desired\nvalues.\n\n\n\n\n3\nOptional. Click on other field values to create a compound query.\u00b6\nFor example, the following image shows shows the compound query\nbuilt by selecting a value in the flightId field.\n\n\n\n\n4\nOptional. Deselect a value.\u00b6\nTo deselect a previously selected value, shift+click on\nthe selected value:\n\n\n\n\n5\nRun the query\u00b6\nTo run the query, click Analyze. Click Reset\nto clear your query.\n\n\nNote\nYou can also use the query builder on data represented as maps.\n\n\n",
            "preview": "Not Available in Compass Community Edition",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/operator/query/",
                "http://docs.mongodb.org/manual/reference/mongodb-extended-json/",
                "https://docs.mongodb.com/compass/current/faq/",
                "https://docs.mongodb.com/compass/current/query-bar/"
            ]
        },
        {
            "slug": "validation/index.html",
            "title": "Document Validation \u2014 MongoDB Compass stable",
            "headings": [
                "Document Validation",
                "Validation Tab",
                "Rule Builder",
                "Update validation action and validation level.",
                "Add, Modify, Remove a Rule.",
                "Click Update to save changes to the validation specification.",
                "JSON Editor"
            ],
            "text": "\nDocument Validation\u00b6\n\nOn this page\n\nValidation Tab\nRule Builder\n\n\nNot Available in Compass Community Edition\n\nValidation Tab\u00b6\nThe Validation tab displays the document\nvalidation specification (the validation\nrules, the validation level, and the validation action) that exists for\na collection.\nFrom this tab, you can update the document validation specification via\nthe Rule Builder or the JSON editor.\nTo access the Validation tab for a collection, click on the\ncollection on the left hand pane.\n\n\n\n\n\nRule Builder\u00b6\nThe Rule Builder facilitates the building and modification of document\nvalidation rules; however, the Rule Builder only supports a subset of\nvalidation conditions.\n\nNote\n\nIf the current validation rules cannot be expressed through the\nRule Builder, Compass deactivates the Rule Builder, and you can\nonly modify the validation specification through the JSON editor\nview.\nEach rule applies to a single field in the collection.\nNo two rules in the Rule Builder can have the same field.\nThe Rule Builder combines validation rules for the different\nfields as a logical AND.\nTo specify conditions not supported by the Rule Builder or to join\nvalidation rules with a logical OR, use the JSON editor\ninstead.\n\n\n1\nUpdate validation action and validation level.\u00b6\nSelect the appropriate validation action and\nvalidation level.\nFor information on validation action and level, see\nDocument Validation.\n\n2\nAdd, Modify, Remove a Rule.\u00b6\nTo add a new rule, click the Add Rule button.\nWhen adding or modifying a rule, select the field and the rule to\napply to the field. The following rule categories are available via\nthe Rule Builder:\n\n\n\n\n\n\nRule Category\nDescription\n\n\n\nExists / Must Not Exist\nEnforces the presence / absence of a field in the documents.\n\nType\nEnforces a specific BSON Type for a field in the documents.\n\nRange\nEnforces a numeric range for a field in the documents.\n\nRegex\nEnforces a regular expression match for a string field in the\ndocuments.\n\n\n\nFor a rule, you can also select the Nullable checkbox to\nindicate that the rule is also fulfilled if the value is null or the\nfield is not present in the document. With the Rule Builder, you\ncannot create compound rules for a single field other than by the\nNullable checkbox.\nThe rule categories \u201cExists\u201d and \u201cMust not\nExist\u201d do not support the Nullable` checkbox.\nTo delete a rule, click on the trash can icon for the rule.\n\n3\nClick Update to save changes to the validation specification.\u00b6\n\n\nJSON Editor\u00b6\nUse the JSON editor to create validation rules.\n1\nUpdate validation action and validation level.\u00b6\nSelect the appropriate validation action and\nvalidation level.\nFor information on validation action and level, see\nDocument Validation.\n\n2\nSpecify the validation rules.\u00b6\nIn the editor, enter the validation rules in strict JSON format. For example:\n{\n   \"$or\": [\n      { \"BeginDate\": { \"$gt\": 1950 } },\n      { \"EndDate\": null }\n   ]\n}\n\n\n\n3\nVerify JSON.\u00b6\nWhen finished editing, hit the Tab key or click outside\nthe editor box.\nIf the JSON document is invalid, an error message displays. Fix any\nerrors.\n\n4\nClick Update to create/update validation rules.\u00b6\n\n\n\n",
            "preview": "Not Available in Compass Community Edition",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/core/document-validation",
                "http://docs.mongodb.org/manual/core/document-validation/"
            ]
        }
    ]
}